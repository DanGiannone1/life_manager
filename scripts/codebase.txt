Here is my codebase:

<File: backend/app.py>
from flask import Flask, request, jsonify, make_response
from flask_limiter import Limiter
from flask_limiter.util import get_remote_address
from flask_cors import CORS
from datetime import datetime, timezone
from typing import Dict, Any, List, Optional, TypedDict, Union
import os
import uuid
from dotenv import load_dotenv
from cosmos_db import CosmosDBManager
import humps
import traceback

# Load environment variables
load_dotenv()

# Initialize Flask app
app = Flask(__name__)
CORS(app)  # Enable CORS for all routes

# Initialize rate limiter
limiter = Limiter(
    app=app,
    key_func=get_remote_address,
    default_limits=["200 per day", "50 per hour"]
)

# Initialize CosmosDB manager
cosmos_db = CosmosDBManager()

class ApiResponse(TypedDict):
    success: bool
    data: Optional[Dict[str, Any]]
    error: Optional[Dict[str, Any]]
    metadata: Optional[Dict[str, Any]]

def create_api_response(
    success: bool,
    data: Optional[Dict[str, Any]] = None,
    error: Optional[Dict[str, Any]] = None,
    metadata: Optional[Dict[str, Any]] = None
) -> ApiResponse:
    """Create a standardized API response following the design document format."""
    response: ApiResponse = {
        "success": success,
        "data": data,
        "error": error,
        "metadata": {
            "timestamp": datetime.now(timezone.utc).isoformat(),
            "requestId": request.headers.get("X-Request-ID", ""),
            **(metadata or {})
        }
    }
    return response

def add_rate_limit_headers(response):
    """Add rate limit headers to the response."""
    if hasattr(request, "view_rate_limit"):
        window_stats = getattr(request, "view_rate_limit")
        response.headers.add(
            "X-RateLimit-Limit",
            str(window_stats.limit)
        )
        response.headers.add(
            "X-RateLimit-Remaining",
            str(window_stats.remaining)
        )
        response.headers.add(
            "X-RateLimit-Reset",
            str(window_stats.reset)
        )
    return response

def snake_to_camel(data: Union[Dict, List]) -> Union[Dict, List]:
    """Convert snake_case keys to camelCase for frontend consumption."""
    return humps.camelize(data)

def camel_to_snake(data: Union[Dict, List]) -> Union[Dict, List]:
    """Convert camelCase keys to snake_case for backend storage."""
    return humps.decamelize(data)

@app.errorhandler(Exception)
def handle_error(error: Exception) -> tuple[Dict[str, Any], int]:
    """Global error handler to ensure consistent error responses."""
    if hasattr(error, "code") and hasattr(error, "description"):
        # Handle Flask/HTTP errors
        status_code = error.code
        error_message = error.description
    else:
        # Handle other exceptions
        status_code = 500
        error_message = str(error)

    app.logger.error(f"Error: {error}")
    app.logger.error(traceback.format_exc())

    response = create_api_response(
        success=False,
        error={
            "code": status_code,
            "message": error_message
        }
    )
    return jsonify(response), status_code

@app.route("/api/v1/user-data", methods=["GET"])
@limiter.limit("60 per hour")
def get_user_data():
    """
    Get all data for a user (tasks, goals, categories, dashboard).
    Rate limit: 60 requests per hour
    """
    try:
        # Get user_id from auth token (placeholder - implement actual auth)
        user_id = request.headers.get("X-User-ID")
        if not user_id:
            raise ValueError("User ID is required")

        # Get all user data using the new get_user_data method
        user_data = cosmos_db.get_user_data(user_id)

        # Convert to camelCase for frontend
        response_data = {
            "tasks": snake_to_camel(user_data["tasks"]),
            "goals": snake_to_camel(user_data["goals"]),
            "categories": snake_to_camel(user_data["categories"]),
            "dashboard": snake_to_camel(user_data["dashboard"]) if user_data["dashboard"] else None,
            "lastSyncedAt": datetime.now(timezone.utc).isoformat()
        }

        response = make_response(jsonify(create_api_response(success=True, data=response_data)))
        return add_rate_limit_headers(response)

    except Exception as e:
        raise

@app.route("/api/v1/sync", methods=["POST"])
@limiter.limit("120 per minute")
def sync_changes():
    """
    Sync changes between frontend and backend.
    Rate limit: 120 requests per minute
    """
    try:
        # Get user_id from auth token (placeholder - implement actual auth)
        user_id = request.headers.get("X-User-ID")
        if not user_id:
            raise ValueError("User ID is required")

        # Get request data
        data = request.get_json()
        if not data:
            raise ValueError("Request body is required")

        changes = data.get("changes", [])
        client_last_sync = data.get("clientLastSync")

        if not client_last_sync:
            raise ValueError("clientLastSync is required")

        # Process each change
        server_changes = []
        has_errors = False

        for change in changes:
            change_type = change.get("type")
            operation = change.get("operation")
            item_id = change.get("id")
            item_data = camel_to_snake(change.get("data", {}))

            if item_data:
                item_data["user_id"] = user_id
                item_data["type"] = change_type
                item_data["updated_at"] = datetime.now(timezone.utc).isoformat()

            try:
                if operation == "create":
                    if not item_data:
                        raise ValueError("Data is required for create operation")
                    item_data["id"] = item_id or str(uuid.uuid4())
                    result = cosmos_db.create_item(item_data)
                    if result:
                        server_changes.append({
                            "type": change_type,
                            "operation": "create",
                            "id": result["id"],
                            "data": snake_to_camel(result),
                            "timestamp": result["updated_at"]
                        })

                elif operation == "update":
                    if not item_id:
                        raise ValueError("Item ID is required for update operation")
                    result = cosmos_db.update_item(item_id, item_data)
                    if result:
                        server_changes.append({
                            "type": change_type,
                            "operation": "update",
                            "id": result["id"],
                            "data": snake_to_camel(result),
                            "timestamp": result["updated_at"]
                        })

                elif operation == "delete":
                    if not item_id:
                        raise ValueError("Item ID is required for delete operation")
                    if cosmos_db.delete_item(item_id, user_id):
                        server_changes.append({
                            "type": change_type,
                            "operation": "delete",
                            "id": item_id,
                            "timestamp": datetime.now(timezone.utc).isoformat()
                        })

            except Exception as operation_error:
                app.logger.error(f"Error processing change: {operation_error}")
                app.logger.error(traceback.format_exc())
                has_errors = True
                error_response = create_api_response(
                    success=False,
                    error=str(operation_error),
                    data={"serverChanges": server_changes}
                )
                response = make_response(jsonify(error_response), 500)
                return add_rate_limit_headers(response)

        # Only proceed with server changes if no errors occurred
        if not has_errors:
            # Get any server-side changes newer than client_last_sync
            server_items = cosmos_db.get_changes_since(user_id, client_last_sync)

            # Add server items to server_changes if they're not already included
            processed_ids = {change["id"] for change in server_changes}
            for item in server_items:
                if item["id"] not in processed_ids:
                    server_changes.append({
                        "type": item["type"],
                        "operation": "update",
                        "id": item["id"],
                        "data": snake_to_camel(item),
                        "timestamp": item["updated_at"]
                    })

            response_data = {
                "serverChanges": server_changes,
                "syncedAt": datetime.now(timezone.utc).isoformat()
            }

            response = make_response(jsonify(create_api_response(success=True, data=response_data)))
            return add_rate_limit_headers(response)

    except Exception as e:
        app.logger.error(f"Unexpected error in sync: {e}")
        app.logger.error(traceback.format_exc())
        error_response = create_api_response(success=False, error=str(e))
        response = make_response(jsonify(error_response), 500)
        return add_rate_limit_headers(response)

if __name__ == "__main__":
    app.run(debug=True)

--------------------------------------------------------------------------------
<File: backend/cosmos_db.py>
# File: backend/cosmos_db.py

import os
from typing import List, Dict, Any, Optional
from dotenv import load_dotenv
from azure.cosmos import CosmosClient, exceptions, PartitionKey
from azure.cosmos.container import ContainerProxy
from azure.cosmos.database import DatabaseProxy
from azure.identity import DefaultAzureCredential
from datetime import datetime, timezone, timedelta
import traceback

class CosmosDBManager:
    def __init__(self, cosmos_host=None, cosmos_database_id=None, cosmos_container_id=None):
        self._load_env_variables(cosmos_host, cosmos_database_id, cosmos_container_id)
        self.client = self._get_cosmos_client()
        self.database: Optional[DatabaseProxy] = None
        self.container: Optional[ContainerProxy] = None
        self._initialize_database_and_container()

    def _load_env_variables(self, cosmos_host=None, cosmos_database_id=None, cosmos_container_id=None):
        load_dotenv()
        self.cosmos_host = cosmos_host or os.environ.get("COSMOS_HOST")
        self.cosmos_database_id = cosmos_database_id or os.environ.get("COSMOS_DATABASE_ID")
        self.cosmos_container_id = cosmos_container_id or os.environ.get("COSMOS_CONTAINER_ID")
        self.tenant_id = os.environ.get("TENANT_ID", '16b3c013-d300-468d-ac64-7eda0820b6d3')

        if not all([self.cosmos_host, self.cosmos_database_id, self.cosmos_container_id]):
            raise ValueError("Cosmos DB configuration is incomplete")

    def _get_cosmos_client(self) -> CosmosClient:
        print("Initializing Cosmos DB client")
        print("Using DefaultAzureCredential for Cosmos DB authentication")
        credential = DefaultAzureCredential(
            interactive_browser_tenant_id=self.tenant_id,
            visual_studio_code_tenant_id=self.tenant_id,
            workload_identity_tenant_id=self.tenant_id,
            shared_cache_tenant_id=self.tenant_id
        )
        return CosmosClient(self.cosmos_host, credential=credential)

    def _initialize_database_and_container(self) -> None:
        try:
            self.database = self._create_or_get_database()
            self.container = self._create_or_get_container()
        except exceptions.CosmosHttpResponseError as e:
            print(f'An error occurred: {e.message}')
            raise

    def _create_or_get_database(self) -> DatabaseProxy:
        try:
            database = self.client.create_database(id=self.cosmos_database_id)
            print(f'Database with id \'{self.cosmos_database_id}\' created')
        except exceptions.CosmosResourceExistsError:
            database = self.client.get_database_client(self.cosmos_database_id)
            print(f'Database with id \'{self.cosmos_database_id}\' was found')
        return database

    def _create_or_get_container(self) -> ContainerProxy:
        try:
            container = self.database.create_container(
                id=self.cosmos_container_id, 
                partition_key=PartitionKey(path='/user_id')
            )
            print(f'Container with id \'{self.cosmos_container_id}\' created')
        except exceptions.CosmosResourceExistsError:
            container = self.database.get_container_client(self.cosmos_container_id)
            print(f'Container with id \'{self.cosmos_container_id}\' was found')
        return container

    # Core CRUD Operations
    def get_item_by_id(self, item_id: str, user_id: str) -> Optional[Dict[str, Any]]:
        """Get a single item by its ID and user_id (partition key)."""
        try:
            item = self.container.read_item(item=item_id, partition_key=user_id)
            return item
        except exceptions.CosmosResourceNotFoundError:
            return None
        except Exception as e:
            print(f"Error retrieving item {item_id}: {str(e)}")
            raise

    def create_item(self, item: Dict[str, Any]) -> Dict[str, Any]:
        """Create a new item in the container."""
        try:
            if 'user_id' not in item:
                raise ValueError("user_id (partition key) is required for create operation")
            
            # Ensure timestamps are set
            current_time = datetime.now(timezone.utc).isoformat()
            item['created_at'] = current_time
            item['updated_at'] = current_time
            
            created_item = self.container.create_item(body=item)
            print(f"Item created with id: {created_item['id']}")
            return created_item
        except exceptions.CosmosResourceExistsError:
            print(f"Item with id {item.get('id')} already exists")
            raise
        except Exception as e:
            print(f"Error creating item: {str(e)}")
            raise

    def update_item(self, item_id: str, updates: Dict[str, Any]) -> Dict[str, Any]:
        """Update an existing item with new values."""
        try:
            # Get the existing item
            existing_item = self.get_item_by_id(item_id, updates['user_id'])
            if not existing_item:
                raise ValueError(f"Item with id {item_id} not found")

            # Update the item with new values
            existing_item.update(updates)
            existing_item['updated_at'] = datetime.now(timezone.utc).isoformat()

            # Replace the item in the container
            updated_item = self.container.replace_item(
                item=item_id,
                body=existing_item
            )
            return updated_item
        except Exception as e:
            print(f"Error updating item {item_id}: {str(e)}")
            raise

    def delete_item(self, item_id: str, user_id: str) -> bool:
        """Delete an item by its ID."""
        try:
            self.container.delete_item(item=item_id, partition_key=user_id)
            return True
        except exceptions.CosmosResourceNotFoundError:
            return False
        except Exception as e:
            print(f"Error deleting item {item_id}: {str(e)}")
            raise

    def get_user_data(self, user_id: str) -> Dict[str, List[Dict[str, Any]]]:
        """Get all data for a user (tasks, goals, categories, dashboard)."""
        try:
            query = """
            SELECT * FROM c 
            WHERE c.user_id = @user_id
            """
            items = list(self.container.query_items(
                query=query,
                parameters=[{"name": "@user_id", "value": user_id}],
                enable_cross_partition_query=False
            ))

            # Organize items by type
            result = {
                "tasks": [],
                "goals": [],
                "categories": [],
                "dashboard": None
            }

            for item in items:
                item_type = item.get("type")
                if item_type == "task":
                    result["tasks"].append(item)
                elif item_type == "goal":
                    result["goals"].append(item)
                elif item_type == "category":
                    result["categories"].append(item)
                elif item_type == "dashboard":
                    result["dashboard"] = item

            return result
        except Exception as e:
            print(f"Error getting user data: {str(e)}")
            raise

    def get_changes_since(self, user_id: str, since_timestamp: str) -> List[Dict[str, Any]]:
        """Get all items that have been updated since a given timestamp."""
        try:
            query = """
            SELECT * FROM c 
            WHERE c.user_id = @user_id 
            AND c.updated_at > @since_timestamp
            """
            items = list(self.container.query_items(
                query=query,
                parameters=[
                    {"name": "@user_id", "value": user_id},
                    {"name": "@since_timestamp", "value": since_timestamp}
                ],
                enable_cross_partition_query=False
            ))
            return items
        except Exception as e:
            print(f"Error getting changes since timestamp: {str(e)}")
            raise



--------------------------------------------------------------------------------
<File: design_document.md>
# Life Manager Design Document

## Table of Contents

1. [Core Architecture](#core-architecture)
   - [Technology Stack](#technology-stack)
   - [State Management](#state-management)
   - [Data Flow & Sync Strategy](#data-flow--sync-strategy)

2. [Data Models](#data-models)
   - [Frontend Data Models (TypeScript)](#frontend-data-models-typescript)
     - [Interface Usage Guidelines](#interface-usage-guidelines)
     - [Common Types](#common-types)
     - [Task Interface](#task-interface)
     - [Goal Interface](#goal-interface)
     - [Category Interface](#category-interface)
     - [Dashboard Interface](#dashboard-interface)
     - [Display Mappings](#display-mappings)
   - [Backend Data Models (CosmosDB)](#backend-data-models-cosmosdb)
     - [Container Strategy & Querying](#container-strategy--querying)
     - [Indexing Strategy](#indexing-strategy)
     - [Document Models](#document-models)

3. [APIs](#apis)
   - [Base URL](#base-url)
   - [Authentication](#authentication)
   - [Common Response Format](#common-response-format)
   - [Error Codes](#error-codes)
   - [Core Endpoints](#core-endpoints)
   - [Rate Limiting](#rate-limiting)


4. [Features & Implementation](#features--implementation)
   - [Sidebar & Top Panel](#sidebar--top-panel)
   - [Home Page](#home-page)
   - [Weekly Plan Page](#weekly-plan-page)
   - [Master List Page](#master-list-page)
   
5. [Styling & UI](#styling--ui)
    - [High-Level Strategy](#high-level-strategy)
    - [Layout Architecture](#layout-architecture)
    - [Design Tokens](#design-tokens)
    - [Interactive Elements](#interactive-elements)
    - [Component Architecture](#component-architecture)





## Core Architecture

### Technology Stack
- Frontend: React/Vite, TailwindCSS, Shadcn Components, Redux Toolkit
- Backend: Python, Flask
- Database: CosmosDB

### State Management

#### Global State (Redux)
All persistent data lives in Redux, serving as the single source of truth for the application. This includes:

1. **User Data**
   - Tasks
   - Goals
   - Categories
   - Dashboard configuration

2. **Application State**
   - Sync status
   - Last sync timestamp
   - Error states
   - User preferences

3. **Store Structure**
```typescript
interface RootState {
    tasks: {
        items: Record<UUID, Task>;
        loading: boolean;
        error: string | null;
    };
    goals: {
        items: Record<UUID, Goal>;
        loading: boolean;
        error: string | null;
    };
    categories: {
        items: Record<UUID, Category>;
        loading: boolean;
        error: string | null;
    };
    dashboard: {
        widgets: DashboardWidget[];
        loading: boolean;
        error: string | null;
    };
    sync: {
        status: 'idle' | 'syncing' | 'error';
        lastSynced: string | null;
        pendingChanges: number;
    };
}
```

#### Local State
Used only for temporary UI states within components:
- Form input values before submission
- Modal/dropdown open/closed states
- Component-specific loading states
- Any temporary data that doesn't need to persist

### Data Flow & Sync Strategy

#### User Login / Initial Load
```mermaid
flowchart LR
    DB[(CosmosDB)] --> 
    API[(/api/v1/user-data)] --> 
    Store[(Redux Store)] --> 
    UI[Application UI]

    classDef storeNode fill:#FF8C00,stroke:#333,stroke-width:2px,color:white
    classDef apiNode fill:#50C878,stroke:#333,stroke-width:2px,color:white
    classDef dbNode fill:#FF69B4,stroke:#333,stroke-width:2px,color:white
    classDef uiNode fill:#9370DB,stroke:#333,stroke-width:2px,color:white

    class Store storeNode
    class API apiNode
    class DB dbNode
    class UI uiNode
```

#### User Interactions
```mermaid
flowchart LR
    Actions[User Actions] -->
    Store[(Redux Store)] -->
    UI[Application UI]
    Store -.->|Debounced Sync| API[(/api/v1/user-data)] -->
    DB[(CosmosDB)]

    classDef storeNode fill:#FF8C00,stroke:#333,stroke-width:2px,color:white
    classDef apiNode fill:#50C878,stroke:#333,stroke-width:2px,color:white
    classDef actionNode fill:#4169E1,stroke:#333,stroke-width:1px,color:white
    classDef dbNode fill:#FF69B4,stroke:#333,stroke-width:2px,color:white
    classDef uiNode fill:#9370DB,stroke:#333,stroke-width:2px,color:white

    class Store storeNode
    class API apiNode
    class Actions actionNode
    class DB dbNode
    class UI uiNode
```

#### 1. Initial Load
```
// In the application's root component (e.g., _app.tsx)
// On initial load:
// 1. Dispatch a loading action to set the application state to loading.
// 2. Call the API to fetch initial user data.
// 3. On successful data fetch:
//    - Dispatch an action to initialize the Redux store with the fetched data.
// 4. On error:
//    - Dispatch an action to set the error state with the error message.
// 5. Finally:
//    - Dispatch a loading action to set the application state to not loading.
```

#### 2. State Updates
```
// The useStateSync hook provides a consistent way to handle state updates.
// It takes a change type (e.g., 'text', 'status', 'priority', 'drag') and an item with changes.
// 1. On change:
//    - Dispatch a Redux action to immediately update the store with the changes.
//      This dispatch triggers a Redux reducer that updates the state.
//    - Trigger a debounced backend sync operation based on the change type.
// The hook returns a handleChange function that components can use to update state.
// The SYNC_CONFIG object defines the debounce time for each change type.
```

#### 3. Component Integration
```
// Components use the useStateSync hook to handle data modifications.
// For example, a TaskCard component:
// 1. Uses the handleChange function from useStateSync.
// 2. When the task title input changes:
//    - Calls handleChange with the 'text' change type, the task object, and the new title.
// 3. When the task status changes:
//    - Calls handleChange with the 'status' change type, the task object, and the new status and updated status history.
```

#### 4. Sync Status Management
```
// The SyncIndicator component provides visual feedback on the sync status.
// 1. It uses a Redux selector to get the current sync state.
// 2. If the sync status is 'syncing', it displays a spinner.
// 3. If the sync status is 'error', it displays an error icon.
//    The error icon will be displayed during retry attempts and after all retries have failed.
// 4. If the sync status is 'idle' and there is a last synced timestamp, it displays the last saved time.
```

#### 5. Error Handling
```
// The handleSyncError function handles failed sync operations.
// 1. It takes an error object and an optional retry attempt counter.
// 2. If the retry attempt is less than the maximum number of retries:
//    - It waits for an exponentially increasing amount of time.
//    - It calls the performSync function to retry the sync operation.
// 3. If the maximum number of retries is reached:
//    - It dispatches an action to set the sync error state with the error message.
```

This architecture provides:
- Single source of truth in Redux
- Consistent state update pattern
- Optimistic updates with backend sync
- Clear sync status feedback
- Automatic error handling and retries
- Simple component integration

## Data Models

### Frontend Data Models (TypeScript)

#### Interface Usage Guidelines

1. **Strict Type Adherence**
   - All frontend components must strictly implement these interfaces
   - No extending interfaces without documentation and team review
   - No bypassing optional fields with type assertions (`!` or `as`)
   - All interface extensions must be backwards compatible

2. **State Management**
   - Redux store must maintain normalized data matching these interfaces
   - All API responses must be validated against these interfaces
   - No storing derived data that can be computed from interface fields
   - Use selectors for computing derived data

3. **Component Props**
   - Components should accept the smallest necessary subset of interfaces
   - Use TypeScript utility types to create precise prop interfaces:
     ```typescript
     // Good
     interface TaskTitleProps {
         task: Pick<Task, 'id' | 'title'>;
     }

     // Avoid
     interface TaskTitleProps {
         task: Task;  // Exposes unnecessary fields
     }
     ```
   - Document required vs optional props

4. **Modification Rules**
   - Interface changes require documentation update
   - Breaking changes must be versioned
   - Additions to interfaces must be optional fields
   - Update all relevant type definitions when modifying interfaces

#### Common Types
```typescript
type UUID = string;
type ISODateString = string;

type Status = 'notStarted' | 'workingOnIt' | 'complete';
type RecurrenceFrequency = 'daily' | 'weekly' | 'monthly' | 'yearly';
type TimeRange = 'day' | 'week' | 'month';
type WidgetType = 'todaysTasks' | 'progress' | 'upcomingTasks';

interface TimeTracking {
    estimatedMinutes?: number;
    actualMinutes?: number;
}

interface StatusHistoryEntry {
    status: Status;
    changedAt: ISODateString;
    notes?: string;
}

interface CompletionEntry {
    completedAt: ISODateString;
    completedBy: UUID;
    nextDueDate?: ISODateString;
    completionNotes?: string;
}

interface RecurrenceRule {
    frequency: RecurrenceFrequency;
    interval: number;
    endDate?: ISODateString;
    maxOccurrences?: number;
    daysOfWeek?: number[];  // 0-6 for weekly
    dayOfMonth?: number;    // 1-31 for monthly
    months?: number[];      // 1-12 for yearly
    weekOfMonth?: number;   // -1 to 5 (-1 for last)
}
```

#### Task Interface
```typescript
interface Task {
    id: UUID;
    userId: UUID;
    type: 'task';
    title: string;
    status: Status;
    priority: number;
    dynamicPriority: number;
    effort?: number;
    notes?: string;
    dueDate?: ISODateString;
    scheduledDate?: ISODateString;
    createdAt: ISODateString;
    updatedAt: ISODateString;
    categoryId?: UUID;
    subcategoryId?: UUID;
    
    statusHistory: StatusHistoryEntry[];
    completionHistory: CompletionEntry[];
    timeTracking?: TimeTracking;
    
    recurrence?: {
        isRecurring: boolean;
        rule?: RecurrenceRule;
    };
    
    tags?: string[];
    
    dependencies?: {
        blockedBy?: UUID[];
        blocks?: UUID[];
    };
    
    relationships?: {
        goalIds?: UUID[];
    };
}
```

#### Goal Interface
```typescript
interface Goal {
    id: UUID;
    userId: UUID;
    type: 'goal';
    title: string;
    status: Status;
    priority: number;
    dynamicPriority: number;
    effort?: number;
    notes?: string;
    categoryId?: UUID;
    subcategoryId?: UUID;
    createdAt: ISODateString;
    updatedAt: ISODateString;
    
    measurement?: {
        targetValue?: number;
        currentValue?: number;
        measureUnit?: string;
    };
    
    timeline: {
        startDate?: ISODateString;
        targetDate: ISODateString;
    };
    
    relationships?: {
        parentGoalId?: UUID;
        childGoalIds?: UUID[];
        taskIds?: UUID[];
    };
    
    progressHistory: {
        date: ISODateString;
        value: number;
        notes?: string;
    }[];
}
```

#### Category Interface
```typescript
interface Category {
    id: UUID;
    userId: UUID;
    name: string;
    color?: string;
    parentId?: UUID;
    
    organization: {
        icon?: string;
        displayOrder: number;
    };
    
    subcategories: {
        id: UUID;
        name: string;
        description?: string;
        color?: string;
        icon?: string;
        displayOrder: number;
    }[];
    
    description?: string;
    
    statistics?: {
        totalItems?: number;
        completedItems?: number;
        averageCompletionTime?: number;
    };
}
```

#### Dashboard Interface
```typescript
interface DashboardWidget {
    id: UUID;
    type: 'todaysTasks' | 'progress' | 'upcomingTasks';
    position: number;
    config: {
        title?: string;
        timeRange?: 'day' | 'week' | 'month';
    };
}

interface Dashboard {
    id: UUID;
    userId: UUID;
    widgets: DashboardWidget[]; // This array of DashboardWidget objects maps directly to the widget objects in the Dashboard document.
}
```



### Display Mappings

#### Status Display Mapping
```typescript
const STATUS_DISPLAY = {
    notStarted: 'Not Started',
    workingOnIt: 'Working on It',
    complete: 'Complete'
};

const STATUS_COLORS = {
    notStarted: 'gray.500',
    workingOnIt: 'yellow.500',
    complete: 'green.500'
};
```

#### Priority Display Mapping
```typescript
const PRIORITY_DISPLAY = {
    ranges: [
        { min: 80, label: 'Very High', color: 'red.500' },
        { min: 60, label: 'High', color: 'orange.500' },
        { min: 40, label: 'Medium', color: 'yellow.500' },
        { min: 20, label: 'Low', color: 'green.500' },
        { min: 0, label: 'Very Low', color: 'green.250' }
    ]
};
```

#### Effort Display Mapping
```typescript
const EFFORT_DISPLAY = {
    1: 'Very Low',
    2: 'Low',
    3: 'Medium',
    4: 'High',
    5: 'Very High'
};
```

#### Time Range Display Mapping
```typescript
const TIME_RANGE_DISPLAY = {
    day: 'Daily',
    week: 'Weekly',
    month: 'Monthly'
};
```



### Backend Data Models (CosmosDB)


All variable names are in snake_case. All documents are stored in a single container to enable efficient querying of a user's complete data set.
The frontend uses camelCase for its data models. A library or manual conversion process will be used to handle the differences in naming conventions during API requests and responses.

#### Case Conversion Function

All data transformations between the backend's `snake_case` data models and the frontend's `camelCase` data models are handled on the backend. This ensures that the frontend receives data in the expected format without needing to perform any conversion logic.

The backend uses a dedicated transformation function or library to convert data structures between the two naming conventions. This process occurs before sending data in API responses.

For example, a `task` document from CosmosDB with fields like `user_id`, `created_at`, and `due_date` will be transformed into a JSON object with fields like `userId`, `createdAt`, and `dueDate` before being sent to the frontend.

This approach centralizes the transformation logic, making it easier to maintain and ensuring consistency across all API responses. It also simplifies the frontend code by removing the need for any data conversion logic.

#### Container Strategy & Querying
The application uses a single container strategy where:
- All document types (tasks, goals, categories, dashboard) live in one container
- Documents are partitioned by `user_id`
- The `type` field enables filtering within a user's partition
- Single query can efficiently retrieve all data for a user

Example query to get all user data:
```sql
SELECT * FROM c
WHERE c.user_id = @userId
```

#### Indexing Strategy
The container uses these indexes to optimize common query patterns:
```json
{
    "indexingPolicy": {
        "includedPaths": [
            {
                "path": "/user_id/?",
                "indexes": [
                    {
                        "kind": "Range",
                        "dataType": "String"
                    }
                ]
            },
            {
                "path": "/type/?",
                "indexes": [
                    {
                        "kind": "Range",
                        "dataType": "String"
                    }
                ]
            },
            {
                "path": "/updated_at/?",
                "indexes": [
                    {
                        "kind": "Range",
                        "dataType": "String"
                    }
                ]
            }
        ]
    }
}
```

#### Document Models

##### Task Document
```json
{
    // Metadata
    "id": "string (UUID)",
    "user_id": "string (UUID)",
    "type": "task",
    "partition_key": "string (user_id)",
    
    // Core Fields
    "title": "string",
    "status": "string (enum: not_started, working_on_it, complete)",
    "priority": "number (0-100)",
    "dynamic_priority": "number (0-100)",
    "effort": "number (1-5, optional)",
    "notes": "string (optional)",
    
    // Dates
    "due_date": "string (ISO date, optional)",
    "scheduled_date": "string (ISO date, optional)",
    "created_at": "string (ISO date)",
    "updated_at": "string (ISO date)",
    
    // Categories
    "category_id": "string (UUID, optional)",
    "subcategory_id": "string (UUID, optional)",
    
    // History Tracking
    "status_history": [
        {
            "status": "string (enum: not_started, working_on_it, complete)",
            "changed_at": "string (ISO date)",
            "notes": "string (optional)"
        }
    ],
    "completion_history": [
        {
            "completed_at": "string (ISO date)",
            "completed_by": "string (UUID)",
            "next_due_date": "string (ISO date, optional)",
            "completion_notes": "string (optional)"
        }
    ],
    
    // Time Management
    "time_tracking": {
        "estimated_minutes": "number (optional)",
        "actual_minutes": "number (optional)"
    },
    
    // Recurrence
    "recurrence": {
        "is_recurring": "boolean",
        "rule": {
            "frequency": "string (enum: daily, weekly, monthly, yearly)",
            "interval": "number",
            "end_date": "string (ISO date, optional)",
            "max_occurrences": "number (optional)",
            "days_of_week": "number[] (0-6, optional)",
            "day_of_month": "number (1-31, optional)",
            "months": "number[] (1-12, optional)",
            "week_of_month": "number (-1 to 5, optional)"
        }
    },
    
    // Relationships
    "tags": "string[] (optional)",
    "dependencies": {
        "blocked_by": "string[] (task UUIDs, optional)",
        "blocks": "string[] (task UUIDs, optional)"
    },
    "relationships": {
        "goal_ids": "string[] (goal UUIDs, optional)"
    }
}
```

##### Goal Document
```json
{
    // Metadata
    "id": "string (UUID)",
    "user_id": "string (UUID)",
    "type": "goal",
    "partition_key": "string (user_id)",
    
    // Core Fields
    "title": "string",
    "status": "string (enum: not_started, working_on_it, complete)",
    "priority": "number (0-100)",
    "dynamic_priority": "number (0-100)",
    "effort": "number (1-5, optional)",
    "notes": "string (optional)",
    
    // Categories
    "category_id": "string (UUID, optional)",
    "subcategory_id": "string (UUID, optional)",
    
    // Dates
    "created_at": "string (ISO date)",
    "updated_at": "string (ISO date)",
    
    // Measurement
    "measurement": {
        "target_value": "number (optional)",
        "current_value": "number (optional)",
        "measure_unit": "string (optional)"
    },
    
    // Timeline
    "timeline": {
        "start_date": "string (ISO date, optional)",
        "target_date": "string (ISO date)"
    },
    
    // Relationships
    "relationships": {
        "parent_goal_id": "string (UUID, optional)",
        "child_goal_ids": "string[] (goal UUIDs, optional)",
        "task_ids": "string[] (task UUIDs, optional)"
    },
    
    // Progress
    "progress_history": [
        {
            "date": "string (ISO date)",
            "value": "number",
            "notes": "string (optional)"
        }
    ]
}
```

##### Category Document
```json
{
    // Metadata
    "id": "string (UUID)",
    "user_id": "string (UUID)",
    "type": "category",
    "partition_key": "string (user_id)",
    
    // Core Fields
    "name": "string",
    "color": "string (optional)",
    "parent_id": "string (UUID, optional)",
    "description": "string (optional)",
    
    // Organization
    "organization": {
        "icon": "string (optional)",
        "display_order": "number"
    },
    
    // Subcategories
    "subcategories": [
        {
            "id": "string (UUID)",
            "name": "string",
            "description": "string (optional)",
            "color": "string (optional)",
            "icon": "string (optional)",
            "display_order": "number"
        }
    ],
    
    // Analytics
    "statistics": {
        "total_items": "number (optional)",
        "completed_items": "number (optional)",
        "average_completion_time": "number (optional)"
    }
}
```

##### Dashboard Document
```json
{
    // Metadata
    "id": "string (UUID)",
    "user_id": "string (UUID)",
    "type": "dashboard",
    "partition_key": "string (user_id)",
    
    // Widgets Configuration
    "widgets": [
        {
            "id": "string (UUID)",
            "type": "string (enum: todays_tasks, progress, upcoming_tasks)",
            "position": "number",
            "config": {
                "title": "string (optional)",
                "time_range": "string (enum: day, week, month, optional)"
            }
        }
    ]
}
```

## APIs

### Base URL
```
https://api.lifemanager.app/v1
```

### Authentication
All API endpoints require authentication using JWT tokens in the Authorization header:

```http
Authorization: Bearer <jwt_token>
```

JWT tokens are obtained through the authentication endpoint and contain:
- User ID
- Token expiration
- Token scope
- Issue timestamp

### Common Response Format
All API responses follow a consistent format:

```typescript
interface ApiResponse<T> {
    success: boolean;
    data?: T;
    error?: {
        code: string;
        message: string;
        details?: any;
    };
    metadata?: {
        timestamp: string;
        requestId: string;
        pagination?: {
            total: number;
            page: number;
            pageSize: number;
            hasMore: boolean;
        };
    };
}
```

### Error Codes
Standard HTTP status codes are used along with custom error codes.
The API response will include the HTTP status code and the custom error code in the error object.

| HTTP Status | Error Code | Description |
|------------|------------|-------------|
| 400 | INVALID_REQUEST | Malformed request or invalid parameters |
| 401 | UNAUTHORIZED | Missing or invalid authentication |
| 403 | FORBIDDEN | Valid auth but insufficient permissions |
| 404 | NOT_FOUND | Resource not found |
| 409 | CONFLICT | Resource conflict (e.g., duplicate) |
| 422 | VALIDATION_ERROR | Request validation failed |
| 429 | RATE_LIMITED | Too many requests |
| 500 | INTERNAL_ERROR | Server error |
| 503 | SERVICE_UNAVAILABLE | Service temporarily unavailable |

### Core Endpoints

#### Initial Data Load
```http
GET /api/v1/user-data
Description: Loads all user data at application startup. This is the only bulk data fetch operation.

Response: {
    success: true,
    data: {
        tasks: Record<UUID, Task>;
        goals: Record<UUID, Goal>;
        categories: Record<UUID, Category>;
        dashboard: Dashboard;
        lastSyncedAt: string; // ISO date
    }
}
```

#### Sync Changes
```http
POST /api/v1/sync
Description: Debounced endpoint that receives changes from the frontend. Called automatically after user actions with configured debounce times per change type.

Request Body: {
    changes: Array<{
        type: 'task' | 'goal' | 'category' | 'dashboard';
        operation: 'create' | 'update' | 'delete';
        id?: UUID;  // Required for update/delete
        data?: Partial<Task | Goal | Category | Dashboard>;  // Required for create/update
        timestamp: string;  // ISO date of when change occurred
        changeType?: 'text' | 'status' | 'priority' | 'drag';  // For debounce configuration
    }>;
    clientLastSync: string;  // ISO date of last successful sync
}

Response: {
    success: true,
    data: {
        // Only sent if server has newer changes
        serverChanges?: Array<{
            type: 'task' | 'goal' | 'category' | 'dashboard';
            operation: 'create' | 'update' | 'delete';
            id: UUID;
            data?: any;
            timestamp: string;
        }>;
        syncedAt: string;  // ISO date of this sync
    }
}
```

### Rate Limiting

Rate limits are configured per endpoint:

| Endpoint | Rate Limit |
|----------|------------|
| GET /user-data | 60 per hour |
| POST /sync | 120 per minute |

Rate limit headers are included in all responses:
```http
X-RateLimit-Limit: <limit>
X-RateLimit-Remaining: <remaining>
X-RateLimit-Reset: <reset_timestamp>
```

When rate limited, the API returns:
```json
{
    "success": false,
    "error": {
        "code": "RATE_LIMITED",
        "message": "Too many requests",
        "details": {
            "retryAfter": 60
        }
    }
}
```


## Features & Implementation

### Sidebar & Top Panel

#### Overview
The application includes a persistent global sidebar (on the left) and a top panel (header bar) that remain visible across all pages. These two navigation and control areas ensure quick access to core features and important indicators (sync status, settings, login/logout, etc.).

#### Goals & Requirements

##### Centralized Navigation
- Provide quick links to core pages (Home, Weekly Plan, Master List, etc.)
- Allow easy navigation without refreshing or reloading the application

##### Persistent Visibility
- Remain visible/accessible at all times, regardless of the active page
- Collapse or expand the sidebar in response to user preference or screen size

##### Key Controls in Top Panel
- Settings button for user preferences, theme toggles, or account info
- Sync/Save Indicator to reflect the real-time sync status from the Redux store
- Login/Logout button/indicator to manage authentication state

##### Responsive & Accessible
- Adapt layout for mobile, tablet, and desktop screen sizes
- Provide clear focus states, ARIA labels, and keyboard navigation

#### Layout & Components
```
+-------------------------------------------------------------+
| Top Panel (header)                                           |
| ----------------------------------------------------------- |
| [App Logo / Title]  [Sync Indicator]  [Settings]  [Logout]   |
+------------------+------------------------------------------+
|   Sidebar        |  Main Content Area                       |
|   [Nav Links]    |  (Home / Weekly Plan / Master List etc.) |
|   [User Info]    |                                          |
|   [Collapse Btn] |                                          |
+------------------+------------------------------------------+
```

#### Sidebar

##### Navigation Links
- Home
- Weekly Plan
- Master List
- (Optional) Additional pages (e.g., Reports, Analytics, etc.)

##### User Info / Profile Section (optional)
- Avatar or initials
- Brief user information (e.g., username, email)

##### Collapse/Expand Control
- A button (e.g., a hamburger icon or double-chevron) that toggles the sidebar's width
- Stores user preference (collapsed/expanded) in Redux or local storage

##### Responsive Behavior
- Mobile: The sidebar may slide in/out over the content
- Desktop: The sidebar remains docked on the left

##### Implementation Details
- Housed in a `<Sidebar>` component, rendered at the same level as the main content
- All navigation items are stored in an array or config object (e.g., `NAV_LINKS = [{ path: '/home', label: 'Home', icon: ... }, ...]`), then mapped to `<NavLink>` items
- Uses Redux to track collapse state, or local React state if it only affects the layout

##### State & Redux Integration
```typescript
interface LayoutState {
  sidebarCollapsed: boolean;
}

const initialState: LayoutState = {
  sidebarCollapsed: false,
};

// Action: toggleSidebar, etc.
```

#### Top Panel

##### Position & Layout
- Stays at the top of the viewport, spanning the full width

##### Content Components
- App Logo or Title: Left-aligned; navigates back to Home or a landing page
- Sync/Save Indicator:
  - Reflects the Redux sync state (idle, syncing, error)
  - Could be a small icon + text (e.g., "All changes saved" or a spinner if syncing)
  - Ties into the same sync slice that other pages use (see Core Architecture > State Management)
- Settings Button:
  - Opens a modal or dedicated page with user-configurable settings (theme, notifications, account details, etc.)
  - Could be an icon button that triggers `<SettingsModal>`
- Login/Logout Button:
  - Shows "Login" if user is not authenticated, "Logout" if user is authenticated
  - On click, dispatches an auth action or navigates to a login page

##### Implementation Details
- Housed in a `<TopPanel>` or `<Header>` component
- Typically rendered once in a root layout file or `_app.tsx` (for Next.js) so it's consistent across all pages
- Sync indicator references the global sync slice in Redux:
```typescript
const syncStatus = useSelector((state: RootState) => state.sync.status);
...
if (syncStatus === 'syncing') renderSpinner();
if (syncStatus === 'error') renderErrorIcon();
if (syncStatus === 'idle') show last synced time or "All changes saved"
```
- The settings button might open a `<SettingsModal>` (managed with local state or a Redux slice if you prefer a global approach)

#### Example User Flow

##### Application Load / Login
- The user logs in (or is already authenticated)
- The top panel displays the user's name or an avatar, the sync indicator, and a logout button
- The sidebar is expanded by default, showing nav links for Home, Weekly Plan, and Master List

##### Navigating Pages
- The user clicks "Weekly Plan" in the sidebar; the main content swaps to the Weekly Plan page
- The top panel remains unchanged (same location, same settings button, etc.), ensuring a consistent experience

##### Checking Sync Status
- As the user makes changes (e.g., dragging a task), the sync indicator in the top panel shifts to a spinning icon or "Syncing..." text
- Once the changes are saved, it updates to "All changes saved" (or the last synced timestamp)

##### Changing Settings
- The user clicks the Settings button in the top panel
- A modal slides in with theme toggles, notification preferences, or account info
- The user saves or closes the settings; the modal disappears

##### Logging Out
- The user clicks "Logout" in the top panel
- The app dispatches a logout action, clears stored user data, and redirects to the login screen

#### Styling

##### Sidebar
- Uses Tailwind classes like `w-64` (or a custom width) when expanded, `w-16` (or smaller) when collapsed
- For mobile, might toggle an absolute position with a backdrop overlay (`fixed inset-0 bg-gray-800 bg-opacity-50`)

##### Top Panel
- Typically a `flex items-center justify-between p-4` with a solid background (e.g., `bg-white shadow-sm`)
- The Sync Indicator might be a small icon and text (e.g., `<div className="flex items-center">...</div>`)
- The Settings button and Logout button are typically icon or text buttons with consistent spacing and hover states

### Home Page

#### Overview
The Home Page serves as the main entry point to the application and provides a high-level overview of a user's tasks, goals, and progress. The page is structured around a grid of Dashboard Widgets (e.g., Today's Tasks, Progress, Upcoming Tasks). Users can add, remove, or configure these widgets via the Add Widget button and widget-specific settings.

#### Goals & Requirements
- **Quick Overview**: Provide at-a-glance summaries of important data (e.g., tasks due today, current progress on goals)
- **Customizable Layout**: Allow users to add, remove, or reorder widgets to tailor the home page to their needs
- **Reusable Patterns**: Reuse the existing data models (Task, Goal, etc.) where possible
- **Consistent State Management**: Any widget modifications or new widgets are tracked in the global Redux store under the dashboard slice
- **Scalability**: The system should support additional widget types or custom widgets in the future

#### Data Flow

##### Initialization
1. On application load (or user login), the global store is populated with the user's data via the `/api/v1/user-data` endpoint
2. The Dashboard document (defined in Dashboard Interface) contains the array of DashboardWidget objects
3. The Home Page reads these widgets from the `dashboard.widgets` array in the Redux store and renders them in a grid layout

##### Widget Rendering
Each widget is represented by a DashboardWidget object in the Redux store:

```typescript
interface DashboardWidget {
    id: UUID;
    type: 'todaysTasks' | 'progress' | 'upcomingTasks';
    position: number;
    config: {
        title?: string;
        timeRange?: 'day' | 'week' | 'month';
    };
}
```

The `type` field determines which widget component to render, and the `config` field controls widget-specific settings (e.g., custom titles, time ranges).

##### Adding Widgets
1. Clicking the Add Widget button triggers a modal or panel that displays the available widget types (today's tasks, progress, upcoming tasks, etc.)
2. Upon selection, a new DashboardWidget entry is created in the Redux store
3. A debounced sync call (via `/api/v1/sync`) persists the newly created widget to the backend

##### Editing / Removing Widgets
1. Each widget has configuration options (where relevant) and a remove button
2. Editing updates the widget's config or position in the Redux store
3. Removing dispatches an action to delete the corresponding widget object from the `dashboard.widgets` array
4. These changes are also synced via `/api/v1/sync`

##### Data Retrieval
- The actual task and goal data is not stored in the widget itself—only references or small config data
- The Today's Tasks widget obtains a list of tasks from the tasks slice in the Redux store by filtering for tasks whose `scheduledDate === today` or `dueDate === today`
- The Progress widget might aggregate data from both tasks and goals slices to display completion percentages and milestones
- The Upcoming Tasks widget filters tasks by due date or scheduled date that falls within the next n days (configurable by the widget's `timeRange` setting)

#### Components

##### HomePage (Container Component)
**Responsibilities:**
- Fetches the `dashboard.widgets` from the Redux store
- Renders the WidgetGrid component, passing the list of widgets
- Hosts the Add Widget button

**Implementation Details:**
- Listens for changes in the Redux dashboard slice
- On mount, if `dashboard.widgets` is empty, may prompt the user to add their first widget

##### WidgetGrid (Layout Component)
**Responsibilities:**
- Lays out all active widgets (e.g., via a CSS grid or a library like react-grid-layout)
- Manages the positioning of widgets based on each `DashboardWidget.position`

**Implementation Details:**
- Iterates over `dashboard.widgets` and renders a Widget component for each
- Might handle drag-and-drop reordering if you want to support dynamic rearrangements
- On drop, dispatches an action to update the position field in the Redux store

##### AddWidgetButton
**Responsibilities:**
- Opens a modal or panel listing the available widgets
- Triggers a Redux action to create a new widget entry in `dashboard.widgets`

**Implementation Details:**
- The new widget is created with a unique id, default position (likely at the end of the list), and any default config settings (e.g., `type: 'todaysTasks', config: { timeRange: 'day' }`)

##### Widget (Generic Component)
**Responsibilities:**
- Serves as a "wrapper" or "shell" for all widget types
- Accepts a DashboardWidget object as a prop
- Dynamically renders the appropriate widget content (e.g., TodaysTasksWidget, ProgressWidget, UpcomingTasksWidget)
- Provides controls for editing or removing the widget

**Implementation Details:**
```typescript
switch (widget.type) {
  case 'todaysTasks':
    return <TodaysTasksWidget widget={widget} />;
  case 'progress':
    return <ProgressWidget widget={widget} />;
  case 'upcomingTasks':
    return <UpcomingTasksWidget widget={widget} />;
  ...
}
```

Handles remove/edit actions by dispatching Redux actions to update or delete this widget.

#### Available Widgets

##### Today's Tasks Widget

**Purpose:** Displays tasks scheduled for the current day (or due today)

**Data Model Usage:**
- Pulls from `tasks.items` in the Redux store
- Filters tasks by `scheduledDate === today` or `dueDate === today`

**Behavior:**
- If no tasks match the filter, displays "No tasks scheduled for today"
- Shows a count of today's tasks in the widget header

**Styling / Layout:**
- Typically a compact list or summary with optional expand-to-detailed view

##### Progress Widget

**Purpose:** Offers a summary of progress across tasks and/or goals within a configurable time range

**Data Model Usage:**
- Pulls from both `tasks.items` and `goals.items` slices
- May use status fields or completion histories to calculate progress
- Relies on the `timeRange` property in `widget.config` to determine the scope of data displayed

**Behavior:**
- Displays a progress bar or a collection of metrics (e.g., tasks completed vs. total tasks)
- May show short-term or long-term goal progress (e.g., completion percentage) if configured

##### Upcoming Tasks Widget

**Purpose:** Lists tasks that are due or scheduled in the upcoming period

**Data Model Usage:**
- Pulls from `tasks.items`, filtering by `scheduledDate` or `dueDate` that falls within the next n days
- The range is determined by `timeRange` (week, month, etc.) from `widget.config`

**Behavior:**
- Displays tasks in chronological order or grouped by day
- If no upcoming tasks, displays a friendly message ("No tasks scheduled for the next 7 days")

#### Handling State & Sync

##### Redux Integration

Dashboard slice structure (from your existing design doc):

```typescript
interface RootState {
  dashboard: {
    widgets: DashboardWidget[];
    loading: boolean;
    error: string | null;
  };
  // ... other slices
}
```

When a widget is added, updated, or removed:
1. A Redux action updates the widgets array accordingly
2. A debounced sync operation triggers the `/api/v1/sync` endpoint to persist changes

##### Error & Loading States

- If the dashboard data fails to load:
  - Show an error state on the Home Page
- If widget modifications fail to sync (e.g., network error):
  - The sync slice's status becomes error
  - The SyncIndicator (documented in your design doc) indicates an error

##### No Additional Data Models

- The widgets rely on the existing Dashboard and DashboardWidget interfaces
- No new dedicated model is necessary for the Home Page—the UI uses the DashboardWidget objects in the store and references tasks / goals / categories as needed

### Weekly Plan Page

#### Overview

The Weekly Plan Page offers a calendar-style interface for scheduling and managing tasks across a seven-day period (e.g., Monday–Sunday). This page follows the same frontend-driven architecture and design principles used throughout the application:

- **Optimistic Updates**: All changes to tasks (e.g., scheduling, status updates) are immediately reflected in the UI and stored in the Redux state.
- **Debounced Sync**: A background sync to the backend (`/api/v1/sync`) ensures data consistency, using the Smart Debounce Manager configured for different change types (drag, text edits, status updates, etc.).
- **Centralized Data Models**: Leverages the existing Task interface (and other data models) defined in the design document. No new data model is required for the Weekly Plan view.

#### Goals & Requirements

##### Visual Scheduling
- Provide a 7-day grid for dropping tasks onto specific days
- Include day headers with dates, highlighting weekends and the current day

##### Unscheduled Task List
- Display tasks without a `scheduledDate`
- Support drag-and-drop from the unscheduled list to a calendar day

##### Quick Status Management
- Allow in-place updates to a task's status (e.g., toggling `notStarted` → `workingOnIt` → `complete`)
- Immediately reflect changes in the Redux store and the calendar

##### Weekly Navigation
- Buttons to jump to the previous or next week without requiring additional API calls (all data is already in the Redux store)
- Smooth transitions and user feedback when changing weeks

##### Error Handling
- Visual and textual feedback if sync operations fail
- Optionally revert changes if retry attempts are exhausted (consistent with the global error-handling policy)

#### Page Layout

```
+----------------------------------------------------------------+
|           Weekly Plan Header (Week Range, Nav Buttons)           |
+-----------------+----------------------------------------------+
| Unscheduled     |        Calendar (7-Day Grid)                 |
| Tasks Sidebar   |    [Mon]  [Tue]  [Wed]  [Thu]  [Fri]  [Sat]  [Sun]
| (Drag Source)   |     ...    ...    ...    ...    ...    ...    ...
+-----------------+----------------------------------------------+
```

##### Weekly Plan Header
- Displays the currently selected week's date range (e.g., "Dec 29 – Jan 4, 2025")
- Provides buttons to navigate to the previous or next week
- Shows an indicator for the current week

##### Unscheduled Task List
- A sidebar listing all tasks whose `scheduledDate` is undefined or null
- Tasks can be dragged from this list onto a specific day in the 7-day grid
- Each task card shows basic fields (e.g., title, priority) and can be expanded to reveal more details if needed

##### Calendar (7-Day Grid)
- Each column represents a day within the selected week
- Tasks assigned to a given date appear within that day's column
- Allows drag-and-drop between days to reschedule tasks
- Visual indicators for weekends and the current day (highlighted column or special styling)

#### Interactions

##### Scheduling a Task
1. **Drag from Sidebar**: When a user drags a task from the Unscheduled Task List to a specific day, the `scheduledDate` field in the Redux store is updated optimistically.
2. **Drag Between Days**: If a user drags a task from one day to another, the existing `scheduledDate` is replaced with the new date.
3. **Backend Sync**: A debounced call (`changeType: 'DRAG_OPERATION'`) is sent to the `/api/v1/sync` endpoint to persist the change.

##### Updating Task Status
1. **Click/Tap Toggle**: Users can click on a status indicator to cycle through `notStarted` → `workingOnIt` → `complete`
2. **History Tracking**: Each status change is appended to the task's `statusHistory`
3. **Optimistic UI**: Status changes appear immediately, followed by a debounced sync

##### Week Navigation
1. **Previous/Next Week**: Buttons update a local `selectedWeek` range in the Redux store (or a local state slice)
2. **Instant UI**: Since all tasks are already in the global Redux store, no additional fetch is necessary. The display filters tasks by date to show only those falling within the selected week

#### State Management

Just like in the Home Page and Master List sections, the Weekly Plan Page leverages both local state and Redux state for clarity and consistency:

```typescript
interface WeeklyPlanState {
    selectedWeek: {
        startDate: ISODateString;
        endDate: ISODateString;
    };
    draggedTask?: UUID;
    expandedDays: Record<ISODateString, boolean>;  
}
```

- `selectedWeek`: Defines the current 7-day range displayed on the Weekly Plan
- `draggedTask`: Temporarily holds the ID of the task being dragged (for visual feedback)
- `expandedDays`: A map or array indicating which days are expanded to show full details, if desired

#### Redux Integration

##### Global Tasks
- The tasks slice in the Redux store already holds all tasks, keyed by their id

##### Selectors
```typescript
// Returns all tasks with no scheduledDate
const selectUnscheduledTasks = createSelector(
  (state: RootState) => state.tasks.items,
  (items) => Object.values(items).filter(task => !task.scheduledDate)
);

// Returns tasks that fall within a specific date
const selectTasksForDate = (date: ISODateString) => createSelector(
  (state: RootState) => state.tasks.items,
  (items) => Object.values(items).filter(task => task.scheduledDate === date)
);
```

##### Sync
Uses the same sync slice described in the Core Architecture for tracking sync status (e.g., 'idle' | 'syncing' | 'error').

#### Components

##### WeeklyPlanContainer

**Responsibilities:**
- Fetches the current `selectedWeek` from local or Redux state
- Renders the Week Header and two main sections: Unscheduled Tasks Sidebar and WeeklyCalendar
- Handles week navigation (previous, next) by updating `selectedWeek`

**Implementation:**
- On mount, calculates the default `selectedWeek` (e.g., current Monday–Sunday)
- Listens for changes in the global tasks slice to update the UI in real time

##### WeekHeader

**Responsibilities:**
- Displays the current week range (e.g., "Dec 29 – Jan 4, 2025")
- Hosts navigation buttons (Previous Week, Next Week)

**Implementation:**
- Reacts to user interactions by adjusting `selectedWeek` in either local or Redux state
- No direct API calls, since the data is already in the store

##### UnscheduledTaskList

**Responsibilities:**
- Lists tasks without a `scheduledDate`, grouped or sorted by priority (optional)
- Supports drag-and-drop to the weekly calendar

**Implementation:**
- Uses `selectUnscheduledTasks` to get an array of unscheduled tasks
- For each task, renders a TaskCard (or a minimal version) showing title, status, and priority
- Integrates the app's drag-and-drop library to start a drag action

##### WeeklyCalendar

**Responsibilities:**
- Renders seven DayColumn components, one for each day in `selectedWeek`
- Provides drop targets for tasks

**Implementation:**
- Maps over the 7-day range, passing each date to a DayColumn component
- Summarizes tasks scheduled for that date via the `selectTasksForDate(date)` selector

##### DayColumn

**Responsibilities:**
- Displays all tasks scheduled on that day
- Accepts dropped tasks and updates their `scheduledDate` via an optimistic Redux action

**Implementation:**
- On drop, calls a local handler (e.g., `handleDrop(taskId, date)`) that dispatches an update to the tasks slice
- If relevant, triggers a sync with `changeType: 'DRAG_OPERATION'`

##### TaskCard

**Responsibilities:**
- Displays the minimal or full view of a task (title, status, priority)
- Offers an inline way to toggle status or edit the title

**Implementation:**
- Uses the SmartDebounceManager to handle text, status, or priority changes
- May be memoized (`React.memo`) to prevent unnecessary re-renders

#### Styling & Display

##### Priority Colors
- The `getTaskColor()` helper (referencing `PRIORITY_DISPLAY`) ensures consistent color coding across the application

##### Status Indicators
- Reuse `STATUS_DISPLAY` and `STATUS_COLORS` mappings for consistent labels and color codes

##### Weekend & Current Day Highlights
- Additional CSS classes or conditional styling to differentiate Saturday/Sunday columns and highlight the current day

#### Performance Optimizations

##### Virtualized Task List
- If the Unscheduled Task List grows large, consider virtualizing it by rendering only the visible tasks and a buffer
- Similar approach as described in the Master List Page

##### Memoized Components
- TaskCard, DayColumn, etc. are wrapped with `React.memo()` to avoid re-renders when unrelated tasks update
- Use `useCallback()` for event handlers tied to specific tasks

##### Smart Debounce for Drags
- Drag-and-drop operations use a shorter debounce interval (e.g., 800ms) to minimize perceived latency
- Status changes (`STATUS_CHANGE`) use 300ms; text edits (`TEXT_INPUT`) use 1000ms, etc.

#### Error Handling

##### Sync Failures
- If the sync for a drag operation fails, the application shows an error indicator in the SyncIndicator (from the design doc)
- Optionally, reverts the task's `scheduledDate` to its previous value after all retries are exhausted

##### Invalid Dates
- The UI prevents dropping tasks onto dates outside the displayed week or on read-only sections
- Graceful error messages if the user tries to schedule a task for an invalid date

##### Concurrent Updates
- If the backend merges or overrides certain fields, the application processes updated data in the `serverChanges` array from the `/api/v1/sync` response and re-renders accordingly

### Master List

#### Overview

The Master List page provides a single, centralized location for viewing and managing all tasks and goals. It follows the same frontend-driven architecture established elsewhere (e.g., optimistic updates, debounced sync with the backend, and data stored in Redux). Filtering, sorting, and updates occur client-side, with changes persisted asynchronously to the backend.

#### Page Layout

##### Page Header

- **Left**: Page title ("Master List")
- **Right**:
  - A Filter toggle button (for expanding/collapsing the filter bar)
  - An Add Item button (opens the shared item creation dialog, used elsewhere in the application)

##### Filter Bar (Collapsible)

**Filter Sections:**
- **Status**: An array of clickable "pill" buttons (e.g., Not Started, Working On It, Complete). Multiple statuses can be selected simultaneously
- **Sort By**: A dropdown list of sortable fields (e.g., Title, Priority, Due Date)
- **Sort Direction**: A simple toggle or dropdown for ascending/descending
- **Type**: A dropdown to filter by task or goal (or both)
- **Search Box**: Filters by text in the title or description, using a debounced strategy (e.g., `TEXT_INPUT`)
- **Additional Filter Dropdowns**:
  - Priority: Utilizes the `PRIORITY_DISPLAY` ranges (e.g., Very High to Very Low)
  - Category: Populated with the user's categories, referencing the Category data model
  - Due Date Range: Filters items based on a specified start/end date
- **Animation**: The filter bar opens and closes with the same animation pattern used in other sections of the app

#### Main Table (or Grid) Component

Displays a combined view of both tasks and goals in a single list (or table).

**Columns:**
- Status (linked to `STATUS_DISPLAY`; includes a checkmark animation)
- Title (inline-editable; debounced updates under `TEXT_INPUT`)
- Priority (displayed using `PRIORITY_DISPLAY` ranges; changes debounced under `PRIORITY_CHANGE`)
- Due Date (optional for tasks, typically relevant for goals with a target date)
- Category (color label or icon drawn from the relevant Category record)
- Created On (read-only ISO timestamp)
- Notes (inline-editable, also under `TEXT_INPUT` debounce)

**Features:**
- **Inline Editing**: All editable columns support immediate UI updates with eventual backend consistency, powered by the same Smart Debounce Manager used in other pages
- **Delete Action**: Each row has a delete/trash icon that removes the item from the store and triggers an immediate sync

##### Status Interaction

The Status column provides a simple, intuitive way to cycle through task/goal statuses:

**Status Cycling:**
- Clicking the status text cycles through the statuses in order: Not Started → Working On It → Complete
- When transitioning to Complete, a checkmark animation plays for visual feedback
- After Complete, clicking again cycles back to Not Started
- Color and text are pulled from `STATUS_DISPLAY` or `STATUS_COLORS`
- Uses a simple fade transition between states

Example status cycling implementation:
```typescript
const cycleStatus = (currentStatus: Status): Status => {
  switch (currentStatus) {
    case 'notStarted':
      return 'workingOnIt';
    case 'workingOnIt':
      return 'complete';
    case 'complete':
      return 'notStarted';
  }
};

// When status is clicked:
// 1. Get next status
// 2. If transitioning to 'complete', play checkmark animation
// 3. Update status in store
// 4. Trigger debounced sync
```

#### State Management

Below is a representative structure for managing the Master List state within the Redux store:

```typescript
masterList: {
  filters: {
    search: string,
    status: Status[],         // e.g. ['notStarted', 'workingOnIt']
    categories?: UUID[],      // IDs of selected categories
    priorityRange?: {         // Ranges from 0-100, or custom logic
      min: number,
      max: number
    },
    dateRange?: {
      start: ISODateString,
      end: ISODateString
    }
  },
  sort: {
    column: string,          // e.g. 'title' or 'createdAt'
    direction: 'asc' | 'desc'
  },
  view: {
    filterBarExpanded: boolean
  },
  pendingChanges: boolean      // True if un-synced changes exist
}
```

**State Components:**
- **Filters**: Maintains local client filters (status, category, text, etc.)
- **Sort**: Tracks the user's chosen sort column and direction; persists in the user's preferences
- **View**: Handles the UI's show/hide states (e.g., filter bar)
- **Pending Changes**: Indicates whether any Master List actions need to be synced (e.g., newly created item not yet persisted)

#### Performance Optimizations

##### Virtualized Rendering

- Similar to the Weekly Plan's approach, only the currently visible rows (plus a small buffer) are rendered
- Enhances performance for large data sets

##### Smart Debounce Manager

A shared utility to handle inbound changes at different debounce intervals. For example:
- `TEXT_INPUT` = 1000 ms
- `STATUS_CHANGE` = 300 ms
- `PRIORITY_CHANGE` = 500 ms

Updates are applied optimistically (immediately in the UI) and synchronized to the server after the specified delay.

##### Memoized Components

Individual table rows or cells can be wrapped in memoization to prevent re-renders unless relevant props change.

Example logic for a row component:
```typescript
// Only re-render if the item ID or last updated timestamp differ from previous props.
```



### Styling & UI
Our application follows a systematic approach to styling, ensuring consistency and maintainability across all components and pages.

#### High-Level Strategy
##### Tailwind Configuration
We leverage a centralized `tailwind.config.js` to define the core aspects of our design system, such as colors, spacing, and typography. All brand colors, font families, font weights, and responsive breakpoints are declared here for consistent usage across the application.

We extend or override the default Tailwind theme in a controlled manner, ensuring we adhere to brand guidelines and maintain design consistency.

##### Global Styling with Shadcn Components
We use `shadcn/ui` as our higher-level component library for shared building blocks (e.g., modals, buttons, dropdowns, toasts). Components from this library come with Tailwind-optimized styling by default, reducing the need for custom classes and ensuring consistency.

We keep overrides to a minimum—when necessary, we do so through the `tailwind.config.js` or well-scoped utility classes to avoid "CSS creep."

##### Theme Control
- The application root (e.g., `_app.tsx` in Next.js or a top-level `AppLayout`) applies the main theme classes (`dark:` variants, if applicable) and global styles
- Any global or base CSS resides in a single `globals.css` file, containing only the most essential resets and brand-wide overrides
- Page-level styling primarily uses Tailwind utilities to ensure each section is self-contained and consistent

##### Utility-First Approach
We prefer Tailwind utility classes (e.g., `p-4`, `flex`, `items-center`, `gap-2`) for layout, spacing, and simple styling needs. This approach keeps our HTML/JSX both readable and consistent, allowing developers to quickly see how elements are styled without diving into external CSS files.

##### Minimal Local Overrides
We avoid in-component or inline style objects whenever possible. If we must do custom styling beyond utility classes, we create small, well-named style modules or add a custom class in `tailwind.config.js` using `@layer components {}`. This ensures that unexpected styling rules remain discoverable and maintainable.

#### Layout Architecture
##### Global Layout
A global layout component (e.g., `<AppLayout>`) defines the overall page structure: header, sidebar, main content area, and optional footer. Each page renders inside this consistent frame, preserving a unified look and feel throughout the application.

##### Responsive Design
We rely heavily on Tailwind's responsive modifiers (e.g., `sm:`, `md:`, `lg:`) for adjusting layout at different breakpoints. Common breakpoints and container widths (e.g., `max-w-screen-lg`) come from `tailwind.config.js`, ensuring uniform resizing across pages.

##### Page-Specific Components
Specialized sections maintain consistent spacing, borders, and fonts by using the same Tailwind utilities defined at the global and component-library level, even while implementing unique functionality for specific pages.

#### Design Tokens
##### Brand Palette
Our brand colors are defined as extended colors in `tailwind.config.js`:

```javascript
theme: {
  extend: {
    colors: {
      brandPrimary: '#1D4ED8',
      brandSecondary: '#9333EA',
      brandAccent: '#F59E0B',
      brandNeutral: '#374151',
    },
  },
}
```

##### Typography System
Global typography settings are configured in `tailwind.config.js`:

```javascript
fontFamily: {
  sans: ['Inter', 'sans-serif'],
  heading: ['Poppins', 'sans-serif'],
}
```

Headings and body text consistently use these definitions through classes like `font-heading` or `font-sans`.

##### Visual Indicators
- Status colors (`notStarted`, `workingOnIt`, `complete`) come from `STATUS_COLORS`, applied as Tailwind classes
- Priority-based colors use `PRIORITY_DISPLAY` ranges, converting them into consistent classes (e.g., `border-l-4 border-red-500`)
- Indicators maintain consistency across all pages to prevent conflicting visuals

#### Interactive Elements
##### Focus & Hover States
Buttons and interactive elements use standard Tailwind focus/hover variants (e.g., `hover:bg-brandPrimary/80`, `focus:outline-none focus:ring-2`). We ensure accessibility by clearly indicating focus states on all actionable items.

##### Motion & Animation
- Light transitions use consistent durations (200-300ms) for smooth interactions
- Complex animations are handled by utility classes or integrated libraries (e.g., Framer Motion)
- Animation timing remains consistent to avoid jarring user experiences

##### System Feedback
- Error and success states follow a unified color scheme (e.g., `text-red-600`, `text-green-600`)
- Toast notifications and sync indicators use consistent styling patterns
- Subtle animations draw attention to important state changes without overwhelming users

#### Component Architecture
##### Reusable Patterns
Common patterns are encapsulated in components (e.g., `<Card>`) that use Tailwind classes, brand colors, and standard shadows. This centralization ensures efficient maintenance and consistent updates.

##### Utility Classes
Frequently used combinations of utility classes can be abstracted into named utilities within `@layer components` in `tailwind.config.js`, reducing markup repetition while maintaining consistency.

##### Theming Support
Dark mode support leverages Tailwind's `dark:` variants with carefully considered color mappings:

```javascript
'brandNeutral': {
  DEFAULT: '#374151',
  dark: '#9CA3AF',
}
```


--------------------------------------------------------------------------------
<File: frontend/components.json>
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "new-york",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.js",
    "css": "src/styles/globals.css",
    "baseColor": "gray",
    "cssVariables": true,
    "prefix": ""
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils",
    "ui": "@/components/ui",
    "lib": "@/lib",
    "hooks": "@/hooks"
  },
  "iconLibrary": "lucide"
}
--------------------------------------------------------------------------------
<File: frontend/eslint.config.js>
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'

export default tseslint.config(
  { ignores: ['dist'] },
  {
    extends: [js.configs.recommended, ...tseslint.configs.recommended],
    files: ['**/*.{ts,tsx}'],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
    plugins: {
      'react-hooks': reactHooks,
      'react-refresh': reactRefresh,
    },
    rules: {
      ...reactHooks.configs.recommended.rules,
      'react-refresh/only-export-components': [
        'warn',
        { allowConstantExport: true },
      ],
    },
  },
)

--------------------------------------------------------------------------------
<File: frontend/index.html>
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Vite + React + TS</title>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>

--------------------------------------------------------------------------------
<File: frontend/package.json>
{
  "name": "frontend",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "@radix-ui/react-avatar": "^1.1.2",
    "@radix-ui/react-dialog": "^1.1.4",
    "@radix-ui/react-dropdown-menu": "^2.1.4",
    "@radix-ui/react-popover": "^1.1.4",
    "@radix-ui/react-select": "^2.1.4",
    "@radix-ui/react-slot": "^1.1.1",
    "@radix-ui/react-tabs": "^1.1.2",
    "@radix-ui/react-toast": "^1.2.4",
    "@radix-ui/react-toggle": "^1.1.1",
    "@shadcn/ui": "^0.0.4",
    "@types/react-window": "^1.8.8",
    "@types/uuid": "^10.0.0",
    "class-variance-authority": "^0.7.1",
    "clsx": "^2.1.1",
    "date-fns": "^4.1.0",
    "framer-motion": "^11.16.0",
    "lucide-react": "^0.469.0",
    "react": "^18.3.1",
    "react-day-picker": "^8.10.1",
    "react-dom": "^18.3.1",
    "react-router-dom": "^7.1.1",
    "react-window": "^1.8.11",
    "tailwind-merge": "^2.6.0",
    "tailwindcss-animate": "^1.0.7",
    "uuid": "^11.0.4"
  },
  "devDependencies": {
    "@eslint/js": "^9.17.0",
    "@reduxjs/toolkit": "^2.5.0",
    "@types/node": "^22.10.5",
    "@types/react": "^18.3.18",
    "@types/react-dom": "^18.3.5",
    "@vitejs/plugin-react": "^4.3.4",
    "autoprefixer": "^10.4.20",
    "eslint": "^9.17.0",
    "eslint-plugin-react-hooks": "^5.0.0",
    "eslint-plugin-react-refresh": "^0.4.16",
    "globals": "^15.14.0",
    "postcss": "^8.4.49",
    "react-redux": "^9.2.0",
    "tailwindcss": "^3.4.17",
    "typescript": "~5.6.2",
    "typescript-eslint": "^8.18.2",
    "vite": "^6.0.5"
  }
}

--------------------------------------------------------------------------------
<File: frontend/postcss.config.js>
export default {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

--------------------------------------------------------------------------------
<File: frontend/src/App.css>
#root {
  margin: 0 auto;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: filter 300ms;
}
.logo:hover {
  filter: drop-shadow(0 0 2em #646cffaa);
}
.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafbaa);
}

@keyframes logo-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@media (prefers-reduced-motion: no-preference) {
  a:nth-of-type(2) .logo {
    animation: logo-spin infinite 20s linear;
  }
}

.card {
  padding: 2em;
}

.read-the-docs {
  color: #888;
}

--------------------------------------------------------------------------------
<File: frontend/src/App.tsx>
import { BrowserRouter as Router, Routes, Route, Navigate } from "react-router-dom";
import { AppLayout } from "@/components/layouts/app-layout";
import { ROUTES } from "@/lib/navigation";
import { MasterList } from "@/pages/MasterList";

// Placeholder pages
const Home = () => <div>Home Page</div>;
const WeeklyPlan = () => <div>Weekly Plan Page</div>;
const Settings = () => <div>Settings Page</div>;

function App() {
  return (
    <Router>
      <Routes>
        <Route
          path={ROUTES.HOME}
          element={
            <AppLayout>
              <Home />
            </AppLayout>
          }
        />
        <Route
          path={ROUTES.WEEKLY_PLAN}
          element={
            <AppLayout>
              <WeeklyPlan />
            </AppLayout>
          }
        />
        <Route
          path={ROUTES.MASTER_LIST}
          element={
            <AppLayout containerWidth="full">
              <MasterList />
            </AppLayout>
          }
        />
        <Route
          path={ROUTES.SETTINGS}
          element={
            <AppLayout containerWidth="sm">
              <Settings />
            </AppLayout>
          }
        />
        <Route path="*" element={<Navigate to={ROUTES.HOME} replace />} />
      </Routes>
    </Router>
  );
}

export default App;

--------------------------------------------------------------------------------
<File: frontend/src/components/layouts/app-layout.tsx>
"use client";

import { ReactNode } from "react";
import { Layout } from "./layout";
import { cn } from "@/lib/utils";

interface AppLayoutProps {
  children: ReactNode;
  className?: string;
  containerWidth?: "sm" | "md" | "lg" | "xl" | "2xl" | "full";
}

export function AppLayout({
  children,
  className,
  containerWidth = "lg",
}: AppLayoutProps) {
  return (
    <Layout>
      <div
        className={cn(
          "mx-auto w-full",
          {
            "max-w-screen-sm": containerWidth === "sm",
            "max-w-screen-md": containerWidth === "md",
            "max-w-screen-lg": containerWidth === "lg",
            "max-w-screen-xl": containerWidth === "xl",
            "max-w-screen-2xl": containerWidth === "2xl",
            "max-w-none": containerWidth === "full",
          },
          className
        )}
      >
        {children}
      </div>
    </Layout>
  );
} 
--------------------------------------------------------------------------------
<File: frontend/src/components/layouts/layout.tsx>
"use client";

import { ReactNode, useState, useEffect } from "react";
import { cn } from "@/lib/utils";
import { Button } from "@/components/wrappers/button";
import { useSelector } from "react-redux";
import { RootState } from "@/store";
import { NAV_ITEMS } from "@/lib/navigation";
import { useLocation, useNavigate } from "react-router-dom";
import { Icons } from "@/components/wrappers/icons";
import { useMediaQuery } from "@/hooks/useMediaQuery";    
import { useSync } from "@/hooks/useSync";

// Animation timing constants
const ANIMATION_DURATION = "duration-300";
const TRANSITION_EASE = "ease-in-out";

interface LayoutProps {
  children: ReactNode;
}

export function Layout({ children }: LayoutProps) {
  const [sidebarCollapsed, setSidebarCollapsed] = useState(false);
  const [mobileMenuOpen, setMobileMenuOpen] = useState(false);
  const syncStatus = useSelector((state: RootState) => state.sync.status);
  const lastSynced = useSelector((state: RootState) => state.sync.lastSynced);
  const location = useLocation();
  const navigate = useNavigate();
  const isMobile = useMediaQuery("(max-width: 768px)");
  const { loadInitialData } = useSync();
  const hasData = useSelector((state: RootState) => state.sync.lastSynced !== null);

  // Load initial data on mount
  useEffect(() => {
    loadInitialData();
  }, [loadInitialData]);

  // Auto-collapse sidebar on mobile
  useEffect(() => {
    if (isMobile) {
      setSidebarCollapsed(true);
    }
  }, [isMobile]);

  // Close mobile menu when route changes
  useEffect(() => {
    setMobileMenuOpen(false);
  }, [location.pathname]);

  return (
    <div className="min-h-screen bg-background">
      {/* Top Panel */}
      <header className="sticky top-0 z-50 w-full border-b bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60">
        <div className="flex h-14 items-center justify-between px-4">
          <div className="flex items-center gap-4">
            {/* Mobile menu button */}
            <Button
              variant="ghost"
              size="sm"
              className="md:hidden"
              onClick={() => setMobileMenuOpen(!mobileMenuOpen)}
            >
              {mobileMenuOpen ? (
                <Icons.x className="h-4 w-4" />
              ) : (
                <Icons.menu className="h-4 w-4" />
              )}
            </Button>
            {/* Logo and title */}
            <div className="flex items-center gap-2">
              <Icons.lifeBuoy className="h-6 w-6 text-primary" />
              <h1 className="text-lg font-semibold bg-gradient-to-r from-primary to-primary/80 bg-clip-text text-transparent">
                Life Manager
              </h1>
            </div>
          </div>
          <div className="flex items-center gap-4">
            {/* Sync Status */}
            <div className="hidden sm:block text-sm text-muted-foreground">
              {syncStatus === "syncing" && (
                <div className="flex items-center gap-2">
                  <Icons.spinner className="h-4 w-4 animate-spin text-primary" />
                  <span>Syncing...</span>
                </div>
              )}
              {syncStatus === "error" && (
                <div className="flex items-center gap-2 text-destructive hover:text-destructive/80 cursor-pointer transition-colors">
                  <Icons.alertCircle className="h-4 w-4" />
                  <span>Sync Error</span>
                </div>
              )}
              {syncStatus === "idle" && lastSynced && (
                <div className="flex items-center gap-2">
                  <Icons.check className="h-4 w-4 text-green-500" />
                  <span>Last synced: {new Date(lastSynced).toLocaleTimeString()}</span>
                </div>
              )}
            </div>
            <Button
              variant="ghost"
              size="sm"
              className="hover:bg-primary/10 focus-visible:ring-2 focus-visible:ring-primary/30"
              onClick={() => navigate("/settings")}
            >
              <Icons.settings className="h-4 w-4 mr-2" />
              <span className="hidden sm:inline">Settings</span>
            </Button>
            <Button 
              variant="ghost" 
              size="sm"
              className="hover:bg-destructive/10 hover:text-destructive focus-visible:ring-2 focus-visible:ring-destructive/30"
            >
              <Icons.logOut className="h-4 w-4 mr-2" />
              <span className="hidden sm:inline">Logout</span>
            </Button>
          </div>
        </div>
      </header>

      {/* Main Content with Sidebar */}
      <div className="flex">
        {/* Sidebar - Desktop */}
        <aside
          className={cn(
            "fixed md:sticky top-14 h-[calc(100vh-3.5rem)] border-r bg-background transition-all",
            ANIMATION_DURATION,
            TRANSITION_EASE,
            {
              "w-64 translate-x-0": !sidebarCollapsed && !isMobile,
              "w-16 translate-x-0": sidebarCollapsed && !isMobile,
              "-translate-x-full w-64": !mobileMenuOpen && isMobile,
              "translate-x-0 w-64": mobileMenuOpen && isMobile,
            }
          )}
        >
          <div className="flex h-full flex-col py-4">
            <nav className="space-y-1 px-2">
              {NAV_ITEMS.map((item) => {
                const Icon = Icons[item.icon as keyof typeof Icons];
                const isActive = location.pathname === item.path;
                return (
                  <Button
                    key={item.path}
                    variant={isActive ? "secondary" : "ghost"}
                    className={cn(
                      "w-full justify-start transition-all",
                      ANIMATION_DURATION,
                      {
                        "bg-primary/10 text-primary": isActive,
                        "hover:bg-primary/5": !isActive,
                        "justify-center px-0": sidebarCollapsed && !isMobile,
                      }
                    )}
                    size="sm"
                    onClick={() => navigate(item.path)}
                  >
                    <Icon 
                      className={cn(
                        "h-4 w-4 transition-transform",
                        ANIMATION_DURATION,
                        !sidebarCollapsed && "mr-2",
                        isActive && "scale-110"
                      )} 
                    />
                    {(!sidebarCollapsed || isMobile) && item.label}
                  </Button>
                );
              })}
            </nav>
            <div className="mt-auto px-2">
              <Button
                variant="ghost"
                size="sm"
                className={cn(
                  "w-full hover:bg-primary/5 md:flex",
                  isMobile && "hidden"
                )}
                onClick={() => setSidebarCollapsed(!sidebarCollapsed)}
              >
                {sidebarCollapsed ? (
                  <Icons.chevronRight className="h-4 w-4" />
                ) : (
                  <Icons.chevronLeft className="h-4 w-4" />
                )}
              </Button>
            </div>
          </div>
        </aside>

        {/* Mobile Backdrop */}
        {mobileMenuOpen && (
          <div
            className="fixed inset-0 bg-background/80 backdrop-blur-sm z-40 md:hidden"
            onClick={() => setMobileMenuOpen(false)}
          />
        )}

        {/* Main Content */}
        <main className={cn(
          "flex-1 py-6 transition-all",
          ANIMATION_DURATION,
          TRANSITION_EASE
        )}>
          {children}
        </main>
      </div>
    </div>
  );
} 
--------------------------------------------------------------------------------
<File: frontend/src/components/master-list/AddGoalDialog.tsx>
import { Button } from "@/components/wrappers/button";
import { Plus } from "lucide-react";

export function AddGoalDialog() {
  return (
    <Button 
      variant="outline" 
      size="sm"
      className="gap-2"
    >
      <Plus className="h-4 w-4" />
      Add Goal
    </Button>
  );
} 
--------------------------------------------------------------------------------
<File: frontend/src/components/master-list/AddTaskDialog.tsx>
import { useState } from "react";
import { v4 as uuidv4 } from "uuid";
import { Button } from "@/components/wrappers/button";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription, DialogFooter } from "@/components/wrappers/dialog";
import { Input } from "@/components/wrappers/input";
import { Select } from "@/components/wrappers/select";
import { Plus } from "lucide-react";
import { useAppDispatch } from "@/store";
import { addTask } from "@/store/slices/tasksSlice";
import { useSync } from "@/hooks/useSync";
import { Task } from "@/types";

export function AddTaskDialog() {
  const dispatch = useAppDispatch();
  const { handleChange } = useSync();
  
  const [open, setOpen] = useState(false);
  const [title, setTitle] = useState("");
  const [priority, setPriority] = useState("50");
  const [effort, setEffort] = useState("1");
  const [category, setCategory] = useState("");
  const [dueDate, setDueDate] = useState("");
  const [notes, setNotes] = useState("");

  const handleClose = () => {
    setOpen(false);
    setTitle("");
    setPriority("50");
    setEffort("1");
    setCategory("");
    setDueDate("");
    setNotes("");
  };

  const handleCreateTask = () => {
    const newId = uuidv4();
    const now = new Date().toISOString();
    
    const newTask: Task = {
      id: newId,
      userId: "test-user-id", // Replace with real user ID from auth context
      type: "task",
      title,
      status: "notStarted",
      priority: parseInt(priority, 10),
      dynamicPriority: parseInt(priority, 10),
      createdAt: now,
      updatedAt: now,
      statusHistory: [],
      completionHistory: [],
      ...(effort && { effort: parseInt(effort, 10) }),
      ...(category && { categoryId: category }),
      ...(dueDate && { dueDate }),
      ...(notes && { notes }),
    };

    // 1) Optimistically add to Redux
    dispatch(addTask(newTask));

    // 2) Queue sync for creation
    handleChange("task", "create", newTask, undefined, newId);

    // 3) Reset form and close dialog
    handleClose();
  };

  return (
    <>
      <Button 
        variant="outline" 
        size="sm"
        className="gap-2"
        onClick={() => setOpen(true)}
      >
        <Plus className="h-4 w-4" />
        Add Task
      </Button>

      <Dialog open={open} onOpenChange={setOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Add New Task</DialogTitle>
            <DialogDescription>
              Enter the details for your new task below.
            </DialogDescription>
          </DialogHeader>
          
          <div className="space-y-4">
            <div>
              <label className="block text-sm font-medium mb-1">Title</label>
              <Input
                value={title}
                onChange={(e) => setTitle(e.target.value)}
                placeholder="Task title..."
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">Priority</label>
              <Select
                options={[
                  { value: "100", label: "Very High" },
                  { value: "80", label: "High" },
                  { value: "50", label: "Medium" },
                  { value: "20", label: "Low" },
                  { value: "0", label: "Very Low" },
                ]}
                value={priority}
                onChange={(val) => setPriority(val)}
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">Effort</label>
              <Select
                options={[
                  { value: "1", label: "1 - Quick" },
                  { value: "2", label: "2 - Small" },
                  { value: "3", label: "3 - Medium" },
                  { value: "5", label: "5 - Large" },
                  { value: "8", label: "8 - Very Large" },
                  { value: "13", label: "13 - Huge" },
                ]}
                value={effort}
                onChange={(val) => setEffort(val)}
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">Category</label>
              <Select
                options={[
                  { value: "work", label: "Work" },
                  { value: "personal", label: "Personal" },
                  { value: "health", label: "Health" },
                  { value: "finance", label: "Finance" },
                  { value: "education", label: "Education" },
                  { value: "other", label: "Other" },
                ]}
                value={category}
                onChange={(val) => setCategory(val)}
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">Due Date</label>
              <Input
                type="date"
                value={dueDate}
                onChange={(e) => setDueDate(e.target.value)}
              />
            </div>

            <div>
              <label className="block text-sm font-medium mb-1">Notes</label>
              <Input
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
                placeholder="Add any notes..."
              />
            </div>
          </div>
          
          <DialogFooter>
            <Button variant="outline" onClick={handleClose}>
              Cancel
            </Button>
            <Button onClick={handleCreateTask}>
              Create Task
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  );
} 
--------------------------------------------------------------------------------
<File: frontend/src/components/master-list/FilterBar.tsx>
import { useDispatch, useSelector } from 'react-redux';
import { RootState } from '../../store';
import {
  setSearch,
  toggleStatus,
  setCategories,
  setPriorityRange,
  setDateRange,
  setSort,
  resetFilters,
  toggleFilterBar,
} from '../../store/slices/masterListSlice';
import { Button } from '../wrappers/button';
import { Input } from '../wrappers/input';
import { Select } from '../wrappers/select';
import { DatePicker } from '../wrappers/date-picker';
import { STATUS_DISPLAY, PRIORITY_DISPLAY } from '../../types';
import { Category, Status } from '../../types';
import { DateRange } from 'react-day-picker';
import { ChevronDown, ChevronUp } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';

export const FilterBar = () => {
  const dispatch = useDispatch();
  const filters = useSelector((state: RootState) => state.masterList.filters);
  const sort = useSelector((state: RootState) => state.masterList.sort);
  const categories = useSelector((state: RootState) => state.categories.items);
  const isExpanded = useSelector((state: RootState) => state.masterList.view.filterBarExpanded);

  const handleSearchChange = (value: string) => {
    dispatch(setSearch(value));
  };

  const handleStatusToggle = (status: Status) => {
    dispatch(toggleStatus(status));
  };

  const handleCategoryChange = (value: string) => {
    dispatch(setCategories([value]));
  };

  const handlePriorityChange = (value: string) => {
    if (!value) {
      dispatch(setPriorityRange({ min: 0, max: 100 }));
      return;
    }
    const parts = value.split('-');
    if (parts.length === 2 && parts[0] && parts[1]) {
      const min = parseInt(parts[0], 10);
      const max = parseInt(parts[1], 10);
      if (!isNaN(min) && !isNaN(max)) {
        dispatch(setPriorityRange({ min, max }));
      }
    }
  };

  const handleDateRangeChange = (range: DateRange | undefined) => {
    dispatch(setDateRange(range));
  };

  const handleSortChange = (value: string) => {
    const [column, direction] = value.split('-') as [string, 'asc' | 'desc'];
    dispatch(setSort({ column, direction }));
  };

  return (
    <div className="bg-white rounded-lg shadow">
      {/* Search and Toggle */}
      <div className="p-4 flex items-center gap-4">
        <div className="flex-1">
          <Input
            type="text"
            placeholder="Search tasks and goals..."
            value={filters.search}
            onChange={(e) => handleSearchChange(e.target.value)}
          />
        </div>
        <Button
          variant="outline"
          size="sm"
          onClick={() => dispatch(toggleFilterBar())}
          className="flex items-center gap-2 bg-white hover:bg-gray-100 border-gray-200"
        >
          {isExpanded ? (
            <>
              Hide Filters
              <ChevronUp className="h-4 w-4" />
            </>
          ) : (
            <>
              Show Filters
              <ChevronDown className="h-4 w-4" />
            </>
          )}
        </Button>
      </div>

      {/* Expandable Filter Section */}
      <AnimatePresence>
        {isExpanded && (
          <motion.div
            initial={{ height: 0, opacity: 0 }}
            animate={{ height: "auto", opacity: 1 }}
            exit={{ height: 0, opacity: 0 }}
            transition={{ duration: 0.2 }}
            className="border-t"
          >
            <div className="p-4 space-y-4">
              {/* Status Pills */}
              <div className="flex flex-wrap gap-2">
                {Object.entries(STATUS_DISPLAY).map(([status, label]) => (
                  <Button
                    key={status}
                    variant={filters.status.includes(status as Status) ? 'default' : 'outline'}
                    onClick={() => handleStatusToggle(status as Status)}
                    size="sm"
                  >
                    {label}
                  </Button>
                ))}
              </div>

              {/* Sort Controls */}
              <div className="flex gap-4">
                <Select
                  value={`${sort.column}-${sort.direction}`}
                  onChange={handleSortChange}
                  options={[
                    { value: 'title-asc', label: 'Title (A-Z)' },
                    { value: 'title-desc', label: 'Title (Z-A)' },
                    { value: 'priority-desc', label: 'Priority (High-Low)' },
                    { value: 'priority-asc', label: 'Priority (Low-High)' },
                    { value: 'dueDate-asc', label: 'Due Date (Earliest)' },
                    { value: 'dueDate-desc', label: 'Due Date (Latest)' },
                    { value: 'createdAt-desc', label: 'Created (Newest)' },
                    { value: 'createdAt-asc', label: 'Created (Oldest)' },
                    { value: 'updatedAt-desc', label: 'Updated (Newest)' },
                    { value: 'updatedAt-asc', label: 'Updated (Oldest)' },
                  ]}
                />
              </div>

              {/* Priority Range */}
              <div>
                <Select
                  value={filters.priorityRange ? `${filters.priorityRange.min}-${filters.priorityRange.max}` : ''}
                  onChange={handlePriorityChange}
                  options={PRIORITY_DISPLAY.ranges.map((range) => ({
                    value: `${range.min}-100`,
                    label: range.label,
                  }))}
                  placeholder="Select Priority Range"
                />
              </div>

              {/* Categories */}
              <div>
                <Select
                  value={filters.categories?.[0] || ''}
                  onChange={handleCategoryChange}
                  options={Object.values(categories).map((category) => ({
                    value: category.id,
                    label: category.name,
                  }))}
                  placeholder="Select Category"
                />
              </div>

              {/* Date Range */}
              <div>
                <DatePicker
                  selected={filters.dateRange}
                  onSelect={handleDateRangeChange}
                  placeholder="Select Date Range"
                  showClearButton
                  onClear={() => dispatch(setDateRange(undefined))}
                />
              </div>

              {/* Reset Button */}
              <div className="flex justify-end">
                <Button
                  variant="outline"
                  onClick={() => dispatch(resetFilters())}
                >
                  Reset Filters
                </Button>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default FilterBar; 
--------------------------------------------------------------------------------
<File: frontend/src/components/master-list/InlineEdit.tsx>
import { useState, useEffect, useRef } from 'react';
import { useDispatch } from 'react-redux';
import { Task, Goal } from '../../types';
import { updateTask } from '../../store/slices/tasksSlice';
import { updateGoal } from '../../store/slices/goalsSlice';
import { Input } from '../wrappers/input';
import { useDebounce } from '../../hooks/useDebounce';

// Only allow editing of string fields that exist in both Task and Goal
type EditableFields = Extract<keyof Task & keyof Goal, string>;
type EditableItem = Task | Goal;

const getItemValue = (item: EditableItem, field: EditableFields): string => {
  const value = item[field];
  return typeof value === 'string' ? value : '';
};

interface InlineEditProps {
  item: EditableItem;
  field: EditableFields;
}

export const InlineEdit = ({ item, field }: InlineEditProps) => {
  const dispatch = useDispatch();
  const [isEditing, setIsEditing] = useState(false);
  const [value, setValue] = useState<string>(getItemValue(item, field));
  const inputRef = useRef<HTMLInputElement>(null);
  const debouncedValue = useDebounce(value, 1000);

  useEffect(() => {
    if (debouncedValue !== getItemValue(item, field)) {
      const changes = {
        [field]: debouncedValue,
        updatedAt: new Date().toISOString(),
      } as const;

      if (item.type === 'task') {
        dispatch(updateTask({
          id: item.id,
          changes,
        }));
      } else {
        dispatch(updateGoal({
          id: item.id,
          changes,
        }));
      }
    }
  }, [debouncedValue, dispatch, field, item]);

  useEffect(() => {
    if (isEditing && inputRef.current) {
      inputRef.current.focus();
    }
  }, [isEditing]);

  const handleDoubleClick = () => {
    setIsEditing(true);
  };

  const handleBlur = () => {
    setIsEditing(false);
  };

  const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    setValue(e.target.value);
  };

  const handleKeyDown = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' || e.key === 'Escape') {
      setIsEditing(false);
    }
  };

  if (isEditing) {
    return (
      <Input
        ref={inputRef}
        type="text"
        value={value}
        onChange={handleChange}
        onBlur={handleBlur}
        onKeyDown={handleKeyDown}
        className="w-full"
      />
    );
  }

  return (
    <div
      onDoubleClick={handleDoubleClick}
      className="cursor-text"
      role="button"
      tabIndex={0}
    >
      {value}
    </div>
  );
};

export default InlineEdit; 
--------------------------------------------------------------------------------
<File: frontend/src/components/master-list/ItemTable.tsx>
import { useSelector } from 'react-redux';
import { FixedSizeList as List } from 'react-window';
import { RootState } from '../../store';
import { Task, Goal, Status, STATUS_DISPLAY, PRIORITY_DISPLAY, EFFORT_DISPLAY, Category } from '../../types';
import { StatusCell } from './StatusCell';
import { InlineEdit } from './InlineEdit';
import { Button } from '../wrappers/button';
import { Trash2 } from 'lucide-react';
import { useDispatch } from 'react-redux';
import { deleteTask } from '../../store/slices/tasksSlice';
import { deleteGoal } from '../../store/slices/goalsSlice';
import { isWithinInterval } from 'date-fns';
import { format } from "date-fns";

type Item = Task | Goal;

const ROW_HEIGHT = 56; // Adjust based on your actual row height
const HEADER_HEIGHT = 40; // Adjust based on your actual header height

interface RowProps {
  index: number;
  style: React.CSSProperties;
  data: {
    items: Item[];
    categories: Record<string, Category>;
  };
}

const getPriorityDisplay = (priority: number) => {
  const range = PRIORITY_DISPLAY.ranges.find(r => priority >= r.min);
  return {
    label: range?.label || 'Unknown',
    color: range?.color || 'gray.500'
  };
};

const formatDate = (dateString: string | undefined) => {
  if (!dateString) return '';
  return format(new Date(dateString), "MM-dd-yy");
};

const Row = ({ index, style, data }: RowProps) => {
  const item = data.items[index];
  if (!item) return null;

  const categories = data.categories;
  const priority = getPriorityDisplay(item.priority);
  const dueDate = item.type === 'task' 
    ? (item as Task).dueDate 
    : (item as Goal).timeline.targetDate;

  return (
    <div
      style={style}
      className="flex items-center border-b border-gray-200 hover:bg-gray-50"
    >
      <div className="flex-1 px-6 py-4 border-r border-gray-100">
        <InlineEdit item={item} field="title" />
      </div>
      <div className="flex-none w-32 px-6 py-4 border-r border-gray-100">
        <StatusCell item={item} />
      </div>
      <div className="flex-none w-24 px-6 py-4 border-r border-gray-100">
        <span className={`inline-flex items-center px-2.5 py-1.5 rounded-full text-xs font-medium ${
          priority.color.includes('red') ? 'bg-red-100 text-red-800' :
          priority.color.includes('orange') ? 'bg-orange-100 text-orange-800' :
          priority.color.includes('yellow') ? 'bg-yellow-100 text-yellow-800' :
          priority.color.includes('green') ? 'bg-green-100 text-green-800' :
          'bg-gray-100 text-gray-800'
        }`}>
          {priority.label}
        </span>
      </div>
      <div className="flex-none w-24 px-6 py-4 border-r border-gray-100">
        {item.effort && EFFORT_DISPLAY[item.effort as keyof typeof EFFORT_DISPLAY]}
      </div>
      <div className="flex-none w-32 px-6 py-4 border-r border-gray-100">
        {item.categoryId && categories[item.categoryId]?.name}
      </div>
      <div className="flex-none w-32 px-6 py-4 border-r border-gray-100">
        {formatDate(dueDate)}
      </div>
      <div className="flex-1 px-6 py-4 border-r border-gray-100">
        <InlineEdit item={item} field="notes" />
      </div>
      <div className="flex-none w-32 px-6 py-4 border-r border-gray-100">
        {formatDate(item.createdAt)}
      </div>
      <div className="flex-none w-32 px-6 py-4 border-r border-gray-100">
        {formatDate(item.updatedAt)}
      </div>
    </div>
  );
};

export const ItemTable = () => {
  const dispatch = useDispatch();
  const tasks = useSelector((state: RootState) => state.tasks.items);
  const goals = useSelector((state: RootState) => state.goals.items);
  const categories = useSelector((state: RootState) => state.categories.items);
  const filters = useSelector((state: RootState) => state.masterList.filters);
  const sort = useSelector((state: RootState) => state.masterList.sort);

  // Combine and filter items
  const items = [...Object.values(tasks), ...Object.values(goals)].filter((item) => {
    // Text search
    if (filters.search && !item.title.toLowerCase().includes(filters.search.toLowerCase())) {
      return false;
    }

    // Status filter
    if (filters.status.length > 0 && !filters.status.includes(item.status)) {
      return false;
    }

    // Category filter
    if (filters.categories?.length && !filters.categories.includes(item.categoryId || '')) {
      return false;
    }

    // Priority range filter
    if (filters.priorityRange) {
      const { min, max } = filters.priorityRange;
      if (item.priority < min || item.priority > max) {
        return false;
      }
    }

    // Date range filter
    if (filters.dateRange?.from && filters.dateRange?.to) {
      const itemDate = item.type === 'task' 
        ? (item as Task).dueDate 
        : (item as Goal).timeline.targetDate;
      
      if (!itemDate) return false;

      const date = new Date(itemDate);
      if (!isWithinInterval(date, { 
        start: filters.dateRange.from, 
        end: filters.dateRange.to 
      })) {
        return false;
      }
    }

    return true;
  });

  // Sort items
  const sortedItems = [...items].sort((a, b) => {
    const direction = sort.direction === 'asc' ? 1 : -1;
    
    switch (sort.column) {
      case 'title':
        return direction * a.title.localeCompare(b.title);
      case 'priority':
        return direction * (b.priority - a.priority);
      case 'createdAt':
        return direction * (new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime());
      case 'updatedAt':
        return direction * (new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime());
      case 'dueDate':
        const aDate = a.type === 'task' ? a.dueDate : (a as Goal).timeline.targetDate;
        const bDate = b.type === 'task' ? b.dueDate : (b as Goal).timeline.targetDate;
        if (!aDate) return direction;
        if (!bDate) return -direction;
        return direction * (new Date(aDate).getTime() - new Date(bDate).getTime());
      default:
        return 0;
    }
  });

  return (
    <div className="bg-white rounded-lg shadow overflow-hidden">
      {/* Header */}
      <div className="flex items-center bg-gray-50 border-b border-gray-200" style={{ height: HEADER_HEIGHT }}>
        <div className="flex-1 px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200">
          Title
        </div>
        <div className="flex-none w-32 px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200">
          Status
        </div>
        <div className="flex-none w-24 px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200">
          Priority
        </div>
        <div className="flex-none w-24 px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200">
          Effort
        </div>
        <div className="flex-none w-32 px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200">
          Category
        </div>
        <div className="flex-none w-32 px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200">
          Due Date
        </div>
        <div className="flex-1 px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200">
          Notes
        </div>
        <div className="flex-none w-32 px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider border-r border-gray-200">
          Created
        </div>
        <div className="flex-none w-32 px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
          Updated
        </div>
      </div>

      {/* Virtualized List */}
      <List
        height={600}
        itemCount={sortedItems.length}
        itemSize={ROW_HEIGHT}
        width="100%"
        itemData={{
          items: sortedItems,
          categories,
        }}
      >
        {Row}
      </List>
    </div>
  );
};

export default ItemTable; 
--------------------------------------------------------------------------------
<File: frontend/src/components/master-list/StatusCell.tsx>
import { useDispatch, useSelector } from 'react-redux';
import { Task, Goal, Status, STATUS_DISPLAY } from '../../types';
import { updateTask } from '../../store/slices/tasksSlice';
import { updateGoal } from '../../store/slices/goalsSlice';
import { motion } from 'framer-motion';
import { RootState } from '@/store';
import { useSync } from '@/hooks/useSync';

interface StatusCellProps {
  item: Task | Goal;
}

const cycleStatus = (currentStatus: Status): Status => {
  switch (currentStatus) {
    case 'notStarted':
      return 'workingOnIt';
    case 'workingOnIt':
      return 'complete';
    case 'complete':
      return 'notStarted';
  }
};

export const StatusCell = ({ item }: StatusCellProps) => {
  const dispatch = useDispatch();
  const { handleChange, syncStatus } = useSync();
  
  // Remove hyphens from ID when accessing Redux state
  const normalizedId = item.id
  
  // Subscribe to the specific item's status in Redux
  const currentStatus = useSelector((state: RootState) => {
    const taskStatus = item.type === 'task' ? state.tasks.items[normalizedId]?.status : null;
    const goalStatus = item.type === 'goal' ? state.goals.items[normalizedId]?.status : null;
    
    console.log('Redux state for this item:', {
      itemId: item.id,
      normalizedId,
      itemType: item.type,
      taskStatus,
      goalStatus,
      fullItem: item.type === 'task' ? state.tasks.items[normalizedId] : state.goals.items[normalizedId],
      allTasks: state.tasks.items // Debug: see all tasks in store
    });
    
    return item.type === 'task' 
      ? taskStatus
      : goalStatus;
  }) || item.status;

  console.log('Using status:', currentStatus, 'from', item.type === 'task' ? 'Redux' : 'props');

  const handleStatusClick = () => {
    const newStatus = cycleStatus(currentStatus);
    const now = new Date().toISOString();
    console.log('New status will be:', newStatus);

    if (item.type === 'task') {
      const changes = {
        status: newStatus,
        statusHistory: [
          ...item.statusHistory,
          { status: newStatus, changedAt: now }
        ],
        updatedAt: now,
      };

      console.log('Dispatching task update with:', changes);
      // Update Redux immediately
      dispatch(updateTask({
        id: normalizedId,
        changes,
      }));

      // Trigger debounced sync
      handleChange(
        'task',
        'update',
        changes,
        'status',
        normalizedId
      );
    } else {
      const changes = {
        status: newStatus,
        updatedAt: now,
        ...(newStatus === 'complete' && {
          progressHistory: [
            ...(item as Goal).progressHistory,
            {
              date: now,
              value: 100,
              notes: 'Goal completed',
            },
          ],
        }),
      };

      console.log('Dispatching goal update with:', changes);
      // Update Redux immediately
      dispatch(updateGoal({
        id: normalizedId,
        changes,
      }));

      // Trigger debounced sync
      handleChange(
        'goal',
        'update',
        changes,
        'status',
        normalizedId
      );
    }
  };

  const getStatusColor = (status: Status) => {
    switch (status) {
      case 'complete':
        return 'bg-green-100 text-green-800 hover:bg-green-200';
      case 'workingOnIt':
        return 'bg-yellow-100 text-yellow-800 hover:bg-yellow-200';
      default:
        return 'bg-gray-100 text-gray-800 hover:bg-gray-200';
    }
  };

  return (
    <motion.button
      onClick={handleStatusClick}
      className={`inline-flex items-center px-2.5 py-1.5 rounded-full text-xs font-medium cursor-pointer transition-colors ${getStatusColor(currentStatus)}`}
      whileTap={{ scale: 0.95 }}
      layout
      disabled={syncStatus === 'error'} // Disable the button if there's a sync error
    >
      {currentStatus === 'complete' && (
        <motion.svg
          initial={{ scale: 0 }}
          animate={{ scale: 1 }}
          className="w-3 h-3 mr-1"
          viewBox="0 0 20 20"
          fill="currentColor"
        >
          <path
            fillRule="evenodd"
            d="M16.707 5.293a1 1 0 010 1.414l-8 8a1 1 0 01-1.414 0l-4-4a1 1 0 011.414-1.414L8 12.586l7.293-7.293a1 1 0 011.414 0z"
            clipRule="evenodd"
          />
        </motion.svg>
      )}
      {STATUS_DISPLAY[currentStatus]}
    </motion.button>
  );
};

export default StatusCell;
--------------------------------------------------------------------------------
<File: frontend/src/components/sync/SyncIndicator.tsx>
import { useSync } from '@/hooks/useSync';
import { Loader2, Check, AlertCircle } from 'lucide-react';
import { cn } from '@/lib/utils';

export function SyncIndicator() {
  const { syncStatus, lastSynced, pendingChanges } = useSync();

  const getStatusDisplay = () => {
    switch (syncStatus) {
      case 'syncing':
        return (
          <div className="flex items-center text-yellow-500">
            <Loader2 className="w-4 h-4 mr-2 animate-spin" />
            <span>Syncing changes...</span>
          </div>
        );
      case 'error':
        return (
          <div className="flex items-center text-red-500">
            <AlertCircle className="w-4 h-4 mr-2" />
            <span>Sync error</span>
          </div>
        );
      case 'idle':
        if (pendingChanges > 0) {
          return (
            <div className="flex items-center text-yellow-500">
              <span>{pendingChanges} pending {pendingChanges === 1 ? 'change' : 'changes'}</span>
            </div>
          );
        }
        return (
          <div className="flex items-center text-green-500">
            <Check className="w-4 h-4 mr-2" />
            <span>All changes saved</span>
            {lastSynced && (
              <span className="ml-2 text-sm text-gray-500">
                {new Date(lastSynced).toLocaleTimeString()}
              </span>
            )}
          </div>
        );
    }
  };

  return (
    <div
      className={cn(
        'px-4 py-2 rounded-md',
        'transition-colors duration-200',
        'flex items-center justify-center',
        'min-w-[200px]'
      )}
    >
      {getStatusDisplay()}
    </div>
  );
}

// Example usage in TopPanel:
/*
function TopPanel() {
  return (
    <div className="flex items-center justify-between px-6 py-4 bg-white border-b">
      <div className="flex items-center">
        <h1 className="text-xl font-semibold">Life Manager</h1>
      </div>
      
      <div className="flex items-center space-x-4">
        <SyncIndicator />
        <SettingsButton />
        <LogoutButton />
      </div>
    </div>
  );
}
*/ 
--------------------------------------------------------------------------------
<File: frontend/src/components/ui/avatar.tsx>
import * as React from "react"
import * as AvatarPrimitive from "@radix-ui/react-avatar"

import { cn } from "@/lib/utils"

const Avatar = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Root
    ref={ref}
    className={cn(
      "relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full",
      className
    )}
    {...props}
  />
))
Avatar.displayName = AvatarPrimitive.Root.displayName

const AvatarImage = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Image>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Image
    ref={ref}
    className={cn("aspect-square h-full w-full", className)}
    {...props}
  />
))
AvatarImage.displayName = AvatarPrimitive.Image.displayName

const AvatarFallback = React.forwardRef<
  React.ElementRef<typeof AvatarPrimitive.Fallback>,
  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>
>(({ className, ...props }, ref) => (
  <AvatarPrimitive.Fallback
    ref={ref}
    className={cn(
      "flex h-full w-full items-center justify-center rounded-full bg-muted",
      className
    )}
    {...props}
  />
))
AvatarFallback.displayName = AvatarPrimitive.Fallback.displayName

export { Avatar, AvatarImage, AvatarFallback }

--------------------------------------------------------------------------------
<File: frontend/src/components/ui/button.tsx>
import * as React from "react"
import { Slot } from "@radix-ui/react-slot"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const buttonVariants = cva(
  "inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-colors focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default:
          "bg-button text-button-text hover:bg-button-hover",
        destructive:
          "bg-destructive text-destructive-foreground shadow-sm hover:bg-destructive/90",
        outline:
          "border border-button bg-transparent text-button hover:bg-button-secondary",
        secondary:
          "bg-button-secondary text-button-secondary-text hover:bg-button-secondary-hover",
        ghost: "hover:bg-button-secondary text-button",
        link: "text-button underline-offset-4 hover:underline",
      },
      size: {
        default: "h-9 px-4 py-2",
        sm: "h-8 rounded-md px-3 text-xs",
        lg: "h-10 rounded-md px-8",
        icon: "h-9 w-9",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

export interface ButtonProps
  extends React.ButtonHTMLAttributes<HTMLButtonElement>,
    VariantProps<typeof buttonVariants> {
  asChild?: boolean
}

const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant, size, asChild = false, ...props }, ref) => {
    const Comp = asChild ? Slot : "button"
    return (
      <Comp
        className={cn(buttonVariants({ variant, size, className }))}
        ref={ref}
        {...props}
      />
    )
  }
)
Button.displayName = "Button"

export { Button, buttonVariants }

--------------------------------------------------------------------------------
<File: frontend/src/components/ui/calendar.tsx>
import * as React from "react"
import { ChevronLeft, ChevronRight } from "lucide-react"
import { DayPicker } from "react-day-picker"

import { cn } from "@/lib/utils"
import { buttonVariants } from "@/components/ui/button"

export type CalendarProps = React.ComponentProps<typeof DayPicker>

function Calendar({
  className,
  classNames,
  showOutsideDays = true,
  ...props
}: CalendarProps) {
  return (
    <DayPicker
      showOutsideDays={showOutsideDays}
      className={cn("p-3", className)}
      classNames={{
        months: "flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0",
        month: "space-y-4",
        caption: "flex justify-center pt-1 relative items-center",
        caption_label: "text-sm font-medium",
        nav: "space-x-1 flex items-center",
        nav_button: cn(
          buttonVariants({ variant: "outline" }),
          "h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100"
        ),
        nav_button_previous: "absolute left-1",
        nav_button_next: "absolute right-1",
        table: "w-full border-collapse space-y-1",
        head_row: "flex",
        head_cell:
          "text-muted-foreground rounded-md w-8 font-normal text-[0.8rem]",
        row: "flex w-full mt-2",
        cell: cn(
          "relative p-0 text-center text-sm focus-within:relative focus-within:z-20 [&:has([aria-selected])]:bg-accent [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected].day-range-end)]:rounded-r-md",
          props.mode === "range"
            ? "[&:has(>.day-range-end)]:rounded-r-md [&:has(>.day-range-start)]:rounded-l-md first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md"
            : "[&:has([aria-selected])]:rounded-md"
        ),
        day: cn(
          buttonVariants({ variant: "ghost" }),
          "h-8 w-8 p-0 font-normal aria-selected:opacity-100"
        ),
        day_range_start: "day-range-start",
        day_range_end: "day-range-end",
        day_selected:
          "bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground",
        day_today: "bg-accent text-accent-foreground",
        day_outside:
          "day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground",
        day_disabled: "text-muted-foreground opacity-50",
        day_range_middle:
          "aria-selected:bg-accent aria-selected:text-accent-foreground",
        day_hidden: "invisible",
        ...classNames,
      }}
      components={{
        IconLeft: ({ className, ...props }) => (
          <ChevronLeft className={cn("h-4 w-4", className)} {...props} />
        ),
        IconRight: ({ className, ...props }) => (
          <ChevronRight className={cn("h-4 w-4", className)} {...props} />
        ),
      }}
      {...props}
    />
  )
}
Calendar.displayName = "Calendar"

export { Calendar }

--------------------------------------------------------------------------------
<File: frontend/src/components/ui/card.tsx>
import * as React from "react"

import { cn } from "@/lib/utils"

const Card = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn(
      "rounded-xl border bg-card text-card-foreground shadow",
      className
    )}
    {...props}
  />
))
Card.displayName = "Card"

const CardHeader = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex flex-col space-y-1.5 p-6", className)}
    {...props}
  />
))
CardHeader.displayName = "CardHeader"

const CardTitle = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("font-semibold leading-none tracking-tight", className)}
    {...props}
  />
))
CardTitle.displayName = "CardTitle"

const CardDescription = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
CardDescription.displayName = "CardDescription"

const CardContent = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div ref={ref} className={cn("p-6 pt-0", className)} {...props} />
))
CardContent.displayName = "CardContent"

const CardFooter = React.forwardRef<
  HTMLDivElement,
  React.HTMLAttributes<HTMLDivElement>
>(({ className, ...props }, ref) => (
  <div
    ref={ref}
    className={cn("flex items-center p-6 pt-0", className)}
    {...props}
  />
))
CardFooter.displayName = "CardFooter"

export { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }

--------------------------------------------------------------------------------
<File: frontend/src/components/ui/dialog.tsx>
import * as React from "react"
import * as DialogPrimitive from "@radix-ui/react-dialog"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const Dialog = DialogPrimitive.Root

const DialogTrigger = DialogPrimitive.Trigger

const DialogPortal = DialogPrimitive.Portal

const DialogClose = DialogPrimitive.Close

const DialogOverlay = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Overlay>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Overlay
    ref={ref}
    className={cn(
      "fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0",
      className
    )}
    {...props}
  />
))
DialogOverlay.displayName = DialogPrimitive.Overlay.displayName

const DialogContent = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>
>(({ className, children, ...props }, ref) => (
  <DialogPortal>
    <DialogOverlay />
    <DialogPrimitive.Content
      ref={ref}
      className={cn(
        "fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg",
        className
      )}
      {...props}
    >
      {children}
      <DialogPrimitive.Close className="absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground">
        <X className="h-4 w-4" />
        <span className="sr-only">Close</span>
      </DialogPrimitive.Close>
    </DialogPrimitive.Content>
  </DialogPortal>
))
DialogContent.displayName = DialogPrimitive.Content.displayName

const DialogHeader = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col space-y-1.5 text-center sm:text-left",
      className
    )}
    {...props}
  />
)
DialogHeader.displayName = "DialogHeader"

const DialogFooter = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLDivElement>) => (
  <div
    className={cn(
      "flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2",
      className
    )}
    {...props}
  />
)
DialogFooter.displayName = "DialogFooter"

const DialogTitle = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Title>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Title
    ref={ref}
    className={cn(
      "text-lg font-semibold leading-none tracking-tight",
      className
    )}
    {...props}
  />
))
DialogTitle.displayName = DialogPrimitive.Title.displayName

const DialogDescription = React.forwardRef<
  React.ElementRef<typeof DialogPrimitive.Description>,
  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>
>(({ className, ...props }, ref) => (
  <DialogPrimitive.Description
    ref={ref}
    className={cn("text-sm text-muted-foreground", className)}
    {...props}
  />
))
DialogDescription.displayName = DialogPrimitive.Description.displayName

export {
  Dialog,
  DialogPortal,
  DialogOverlay,
  DialogTrigger,
  DialogClose,
  DialogContent,
  DialogHeader,
  DialogFooter,
  DialogTitle,
  DialogDescription,
}

--------------------------------------------------------------------------------
<File: frontend/src/components/ui/dropdown-menu.tsx>
"use client"

import * as React from "react"
import * as DropdownMenuPrimitive from "@radix-ui/react-dropdown-menu"
import { Check, ChevronRight, Circle } from "lucide-react"

import { cn } from "@/lib/utils"

const DropdownMenu = DropdownMenuPrimitive.Root

const DropdownMenuTrigger = DropdownMenuPrimitive.Trigger

const DropdownMenuGroup = DropdownMenuPrimitive.Group

const DropdownMenuPortal = DropdownMenuPrimitive.Portal

const DropdownMenuSub = DropdownMenuPrimitive.Sub

const DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup

const DropdownMenuSubTrigger = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {
    inset?: boolean
  }
>(({ className, inset, children, ...props }, ref) => (
  <DropdownMenuPrimitive.SubTrigger
    ref={ref}
    className={cn(
      "flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  >
    {children}
    <ChevronRight className="ml-auto" />
  </DropdownMenuPrimitive.SubTrigger>
))
DropdownMenuSubTrigger.displayName =
  DropdownMenuPrimitive.SubTrigger.displayName

const DropdownMenuSubContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.SubContent
    ref={ref}
    className={cn(
      "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
      className
    )}
    {...props}
  />
))
DropdownMenuSubContent.displayName =
  DropdownMenuPrimitive.SubContent.displayName

const DropdownMenuContent = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>
>(({ className, sideOffset = 4, ...props }, ref) => (
  <DropdownMenuPrimitive.Portal>
    <DropdownMenuPrimitive.Content
      ref={ref}
      sideOffset={sideOffset}
      className={cn(
        "z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md",
        "data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </DropdownMenuPrimitive.Portal>
))
DropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName

const DropdownMenuItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&>svg]:size-4 [&>svg]:shrink-0",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName

const DropdownMenuCheckboxItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>
>(({ className, children, checked, ...props }, ref) => (
  <DropdownMenuPrimitive.CheckboxItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    checked={checked}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.CheckboxItem>
))
DropdownMenuCheckboxItem.displayName =
  DropdownMenuPrimitive.CheckboxItem.displayName

const DropdownMenuRadioItem = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>
>(({ className, children, ...props }, ref) => (
  <DropdownMenuPrimitive.RadioItem
    ref={ref}
    className={cn(
      "relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute left-2 flex h-3.5 w-3.5 items-center justify-center">
      <DropdownMenuPrimitive.ItemIndicator>
        <Circle className="h-2 w-2 fill-current" />
      </DropdownMenuPrimitive.ItemIndicator>
    </span>
    {children}
  </DropdownMenuPrimitive.RadioItem>
))
DropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName

const DropdownMenuLabel = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {
    inset?: boolean
  }
>(({ className, inset, ...props }, ref) => (
  <DropdownMenuPrimitive.Label
    ref={ref}
    className={cn(
      "px-2 py-1.5 text-sm font-semibold",
      inset && "pl-8",
      className
    )}
    {...props}
  />
))
DropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName

const DropdownMenuSeparator = React.forwardRef<
  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <DropdownMenuPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
DropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName

const DropdownMenuShortcut = ({
  className,
  ...props
}: React.HTMLAttributes<HTMLSpanElement>) => {
  return (
    <span
      className={cn("ml-auto text-xs tracking-widest opacity-60", className)}
      {...props}
    />
  )
}
DropdownMenuShortcut.displayName = "DropdownMenuShortcut"

export {
  DropdownMenu,
  DropdownMenuTrigger,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuCheckboxItem,
  DropdownMenuRadioItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuShortcut,
  DropdownMenuGroup,
  DropdownMenuPortal,
  DropdownMenuSub,
  DropdownMenuSubContent,
  DropdownMenuSubTrigger,
  DropdownMenuRadioGroup,
}

--------------------------------------------------------------------------------
<File: frontend/src/components/ui/input.tsx>
import * as React from "react"

import { cn } from "@/lib/utils"

const Input = React.forwardRef<HTMLInputElement, React.ComponentProps<"input">>(
  ({ className, type, ...props }, ref) => {
    return (
      <input
        type={type}
        className={cn(
          "flex h-9 w-full rounded-md border border-input bg-transparent px-3 py-1 text-base shadow-sm transition-colors file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:cursor-not-allowed disabled:opacity-50 md:text-sm",
          className
        )}
        ref={ref}
        {...props}
      />
    )
  }
)
Input.displayName = "Input"

export { Input }

--------------------------------------------------------------------------------
<File: frontend/src/components/ui/popover.tsx>
import * as React from "react"
import * as PopoverPrimitive from "@radix-ui/react-popover"

import { cn } from "@/lib/utils"

const Popover = PopoverPrimitive.Root

const PopoverTrigger = PopoverPrimitive.Trigger

const PopoverAnchor = PopoverPrimitive.Anchor

const PopoverContent = React.forwardRef<
  React.ElementRef<typeof PopoverPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>
>(({ className, align = "center", sideOffset = 4, ...props }, ref) => (
  <PopoverPrimitive.Portal>
    <PopoverPrimitive.Content
      ref={ref}
      align={align}
      sideOffset={sideOffset}
      className={cn(
        "z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        className
      )}
      {...props}
    />
  </PopoverPrimitive.Portal>
))
PopoverContent.displayName = PopoverPrimitive.Content.displayName

export { Popover, PopoverTrigger, PopoverContent, PopoverAnchor }

--------------------------------------------------------------------------------
<File: frontend/src/components/ui/select.tsx>
import * as React from "react"
import * as SelectPrimitive from "@radix-ui/react-select"
import { Check, ChevronDown, ChevronUp } from "lucide-react"

import { cn } from "@/lib/utils"

const Select = SelectPrimitive.Root

const SelectGroup = SelectPrimitive.Group

const SelectValue = SelectPrimitive.Value

const SelectTrigger = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Trigger
    ref={ref}
    className={cn(
      "flex h-9 w-full items-center justify-between whitespace-nowrap rounded-md border border-input bg-transparent px-3 py-2 text-sm shadow-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-1 focus:ring-ring disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1",
      className
    )}
    {...props}
  >
    {children}
    <SelectPrimitive.Icon asChild>
      <ChevronDown className="h-4 w-4 opacity-50" />
    </SelectPrimitive.Icon>
  </SelectPrimitive.Trigger>
))
SelectTrigger.displayName = SelectPrimitive.Trigger.displayName

const SelectScrollUpButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollUpButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronUp className="h-4 w-4" />
  </SelectPrimitive.ScrollUpButton>
))
SelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName

const SelectScrollDownButton = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.ScrollDownButton
    ref={ref}
    className={cn(
      "flex cursor-default items-center justify-center py-1",
      className
    )}
    {...props}
  >
    <ChevronDown className="h-4 w-4" />
  </SelectPrimitive.ScrollDownButton>
))
SelectScrollDownButton.displayName =
  SelectPrimitive.ScrollDownButton.displayName

const SelectContent = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>
>(({ className, children, position = "popper", ...props }, ref) => (
  <SelectPrimitive.Portal>
    <SelectPrimitive.Content
      ref={ref}
      className={cn(
        "relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2",
        position === "popper" &&
          "data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1",
        className
      )}
      position={position}
      {...props}
    >
      <SelectScrollUpButton />
      <SelectPrimitive.Viewport
        className={cn(
          "p-1",
          position === "popper" &&
            "h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]"
        )}
      >
        {children}
      </SelectPrimitive.Viewport>
      <SelectScrollDownButton />
    </SelectPrimitive.Content>
  </SelectPrimitive.Portal>
))
SelectContent.displayName = SelectPrimitive.Content.displayName

const SelectLabel = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Label>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Label
    ref={ref}
    className={cn("px-2 py-1.5 text-sm font-semibold", className)}
    {...props}
  />
))
SelectLabel.displayName = SelectPrimitive.Label.displayName

const SelectItem = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Item>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>
>(({ className, children, ...props }, ref) => (
  <SelectPrimitive.Item
    ref={ref}
    className={cn(
      "relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-2 pr-8 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50",
      className
    )}
    {...props}
  >
    <span className="absolute right-2 flex h-3.5 w-3.5 items-center justify-center">
      <SelectPrimitive.ItemIndicator>
        <Check className="h-4 w-4" />
      </SelectPrimitive.ItemIndicator>
    </span>
    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>
  </SelectPrimitive.Item>
))
SelectItem.displayName = SelectPrimitive.Item.displayName

const SelectSeparator = React.forwardRef<
  React.ElementRef<typeof SelectPrimitive.Separator>,
  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>
>(({ className, ...props }, ref) => (
  <SelectPrimitive.Separator
    ref={ref}
    className={cn("-mx-1 my-1 h-px bg-muted", className)}
    {...props}
  />
))
SelectSeparator.displayName = SelectPrimitive.Separator.displayName

export {
  Select,
  SelectGroup,
  SelectValue,
  SelectTrigger,
  SelectContent,
  SelectLabel,
  SelectItem,
  SelectSeparator,
  SelectScrollUpButton,
  SelectScrollDownButton,
}

--------------------------------------------------------------------------------
<File: frontend/src/components/ui/tabs.tsx>
import * as React from "react"
import * as TabsPrimitive from "@radix-ui/react-tabs"

import { cn } from "@/lib/utils"

const Tabs = TabsPrimitive.Root

const TabsList = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.List>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.List
    ref={ref}
    className={cn(
      "inline-flex h-9 items-center justify-center rounded-lg bg-muted p-1 text-muted-foreground",
      className
    )}
    {...props}
  />
))
TabsList.displayName = TabsPrimitive.List.displayName

const TabsTrigger = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Trigger>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Trigger
    ref={ref}
    className={cn(
      "inline-flex items-center justify-center whitespace-nowrap rounded-md px-3 py-1 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow",
      className
    )}
    {...props}
  />
))
TabsTrigger.displayName = TabsPrimitive.Trigger.displayName

const TabsContent = React.forwardRef<
  React.ElementRef<typeof TabsPrimitive.Content>,
  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>
>(({ className, ...props }, ref) => (
  <TabsPrimitive.Content
    ref={ref}
    className={cn(
      "mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2",
      className
    )}
    {...props}
  />
))
TabsContent.displayName = TabsPrimitive.Content.displayName

export { Tabs, TabsList, TabsTrigger, TabsContent }

--------------------------------------------------------------------------------
<File: frontend/src/components/ui/toast.tsx>
import * as React from "react"
import * as ToastPrimitives from "@radix-ui/react-toast"
import { cva, type VariantProps } from "class-variance-authority"
import { X } from "lucide-react"

import { cn } from "@/lib/utils"

const ToastProvider = ToastPrimitives.Provider

const ToastViewport = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Viewport>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Viewport
    ref={ref}
    className={cn(
      "fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]",
      className
    )}
    {...props}
  />
))
ToastViewport.displayName = ToastPrimitives.Viewport.displayName

const toastVariants = cva(
  "group pointer-events-auto relative flex w-full items-center justify-between space-x-2 overflow-hidden rounded-md border p-4 pr-6 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full",
  {
    variants: {
      variant: {
        default: "border bg-background text-foreground",
        destructive:
          "destructive group border-destructive bg-destructive text-destructive-foreground",
      },
    },
    defaultVariants: {
      variant: "default",
    },
  }
)

const Toast = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Root>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &
    VariantProps<typeof toastVariants>
>(({ className, variant, ...props }, ref) => {
  return (
    <ToastPrimitives.Root
      ref={ref}
      className={cn(toastVariants({ variant }), className)}
      {...props}
    />
  )
})
Toast.displayName = ToastPrimitives.Root.displayName

const ToastAction = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Action>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Action
    ref={ref}
    className={cn(
      "inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium transition-colors hover:bg-secondary focus:outline-none focus:ring-1 focus:ring-ring disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive",
      className
    )}
    {...props}
  />
))
ToastAction.displayName = ToastPrimitives.Action.displayName

const ToastClose = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Close>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Close
    ref={ref}
    className={cn(
      "absolute right-1 top-1 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-1 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600",
      className
    )}
    toast-close=""
    {...props}
  >
    <X className="h-4 w-4" />
  </ToastPrimitives.Close>
))
ToastClose.displayName = ToastPrimitives.Close.displayName

const ToastTitle = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Title>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Title
    ref={ref}
    className={cn("text-sm font-semibold [&+div]:text-xs", className)}
    {...props}
  />
))
ToastTitle.displayName = ToastPrimitives.Title.displayName

const ToastDescription = React.forwardRef<
  React.ElementRef<typeof ToastPrimitives.Description>,
  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>
>(({ className, ...props }, ref) => (
  <ToastPrimitives.Description
    ref={ref}
    className={cn("text-sm opacity-90", className)}
    {...props}
  />
))
ToastDescription.displayName = ToastPrimitives.Description.displayName

type ToastProps = React.ComponentPropsWithoutRef<typeof Toast>

type ToastActionElement = React.ReactElement<typeof ToastAction>

export {
  type ToastProps,
  type ToastActionElement,
  ToastProvider,
  ToastViewport,
  Toast,
  ToastTitle,
  ToastDescription,
  ToastClose,
  ToastAction,
}

--------------------------------------------------------------------------------
<File: frontend/src/components/ui/toaster.tsx>
import { useToast } from "@/hooks/use-toast"
import {
  Toast,
  ToastClose,
  ToastDescription,
  ToastProvider,
  ToastTitle,
  ToastViewport,
} from "@/components/ui/toast"

export function Toaster() {
  const { toasts } = useToast()

  return (
    <ToastProvider>
      {toasts.map(function ({ id, title, description, action, ...props }) {
        return (
          <Toast key={id} {...props}>
            <div className="grid gap-1">
              {title && <ToastTitle>{title}</ToastTitle>}
              {description && (
                <ToastDescription>{description}</ToastDescription>
              )}
            </div>
            {action}
            <ToastClose />
          </Toast>
        )
      })}
      <ToastViewport />
    </ToastProvider>
  )
}

--------------------------------------------------------------------------------
<File: frontend/src/components/ui/toggle.tsx>
"use client"

import * as React from "react"
import * as TogglePrimitive from "@radix-ui/react-toggle"
import { cva, type VariantProps } from "class-variance-authority"

import { cn } from "@/lib/utils"

const toggleVariants = cva(
  "inline-flex items-center justify-center gap-2 rounded-md text-sm font-medium transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0",
  {
    variants: {
      variant: {
        default: "bg-transparent",
        outline:
          "border border-input bg-transparent shadow-sm hover:bg-accent hover:text-accent-foreground",
      },
      size: {
        default: "h-9 px-2 min-w-9",
        sm: "h-8 px-1.5 min-w-8",
        lg: "h-10 px-2.5 min-w-10",
      },
    },
    defaultVariants: {
      variant: "default",
      size: "default",
    },
  }
)

const Toggle = React.forwardRef<
  React.ElementRef<typeof TogglePrimitive.Root>,
  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &
    VariantProps<typeof toggleVariants>
>(({ className, variant, size, ...props }, ref) => (
  <TogglePrimitive.Root
    ref={ref}
    className={cn(toggleVariants({ variant, size, className }))}
    {...props}
  />
))

Toggle.displayName = TogglePrimitive.Root.displayName

export { Toggle, toggleVariants }

--------------------------------------------------------------------------------
<File: frontend/src/components/wrappers/button.tsx>
import * as React from "react";
import { Button as ShadcnButton } from "@/components/ui/button";
import { cn } from "@/lib/utils";
import { type ButtonProps as ShadcnButtonProps } from "@/components/ui/button";

export type ButtonProps = ShadcnButtonProps;

export const Button = React.forwardRef<HTMLButtonElement, ButtonProps>(
  ({ className, variant = "default", size = "default", ...props }, ref) => {
    return (
      <ShadcnButton
        className={cn(className)}
        variant={variant}
        size={size}
        ref={ref}
        {...props}
      />
    );
  }
);

Button.displayName = "Button"; 
--------------------------------------------------------------------------------
<File: frontend/src/components/wrappers/card.tsx>
import * as React from "react";
import {
  Card as ShadcnCard,
  CardContent,
  CardDescription,
  CardFooter,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { cn } from "@/lib/utils";

export interface CardProps {
  children: React.ReactNode;
  title?: string;
  description?: string;
  footer?: React.ReactNode;
  className?: string;
  contentClassName?: string;
  headerClassName?: string;
  footerClassName?: string;
}

export const Card = ({
  children,
  title,
  description,
  footer,
  className,
  contentClassName,
  headerClassName,
  footerClassName,
}: CardProps) => {
  return (
    <ShadcnCard
      className={cn(
        "transition-shadow hover:shadow-lg",
        "border border-border/40",
        className
      )}
    >
      {(title || description) && (
        <CardHeader className={cn("space-y-1.5 p-6", headerClassName)}>
          {title && <CardTitle>{title}</CardTitle>}
          {description && <CardDescription>{description}</CardDescription>}
        </CardHeader>
      )}
      <CardContent className={cn("p-6 pt-0", contentClassName)}>
        {children}
      </CardContent>
      {footer && (
        <CardFooter className={cn("p-6 pt-0", footerClassName)}>
          {footer}
        </CardFooter>
      )}
    </ShadcnCard>
  );
};

export { CardContent, CardDescription, CardFooter, CardHeader, CardTitle }; 
--------------------------------------------------------------------------------
<File: frontend/src/components/wrappers/container.tsx>
import * as React from "react";
import { cn } from "@/lib/utils";

export interface ContainerProps {
  children: React.ReactNode;
  className?: string;
  size?: "sm" | "md" | "lg" | "xl" | "2xl" | "full";
}

const containerSizes = {
  sm: "max-w-screen-sm",
  md: "max-w-screen-md",
  lg: "max-w-screen-lg",
  xl: "max-w-screen-xl",
  "2xl": "max-w-screen-2xl",
  full: "max-w-full",
} as const;

export const Container = ({
  children,
  className,
  size = "lg",
}: ContainerProps) => {
  return (
    <div
      className={cn(
        "mx-auto w-full px-4 sm:px-6 lg:px-8",
        containerSizes[size],
        className
      )}
    >
      {children}
    </div>
  );
}; 
--------------------------------------------------------------------------------
<File: frontend/src/components/wrappers/date-picker.tsx>
import * as React from "react";
import { format } from "date-fns";
import { Calendar as CalendarIcon } from "lucide-react";
import { cn } from "../../lib/utils";
import { Button } from "./button";
import { Calendar } from "../ui/calendar";
import { Popover, PopoverContent, PopoverTrigger } from "../ui/popover";
import { DateRange } from "react-day-picker";

interface DatePickerProps {
  selected?: DateRange | undefined;
  onSelect?: (date: DateRange | undefined) => void;
  placeholder?: string;
  showClearButton?: boolean;
  onClear?: () => void;
}

export function DatePicker({
  selected,
  onSelect,
  placeholder = "Pick a date range",
  showClearButton = false,
  onClear,
}: DatePickerProps) {
  const [isOpen, setIsOpen] = React.useState(false);

  const formatSelectedDate = () => {
    if (!selected?.from) return placeholder;
    if (selected.to) {
      return `${format(selected.from, "PPP")} - ${format(selected.to, "PPP")}`;
    }
    return format(selected.from, "PPP");
  };

  const handleSelect = React.useCallback(
    (range: DateRange | undefined) => {
      onSelect?.(range);
      if (range?.to) {
        setIsOpen(false);
      }
    },
    [onSelect]
  );

  return (
    <Popover open={isOpen} onOpenChange={setIsOpen}>
      <PopoverTrigger asChild>
        <Button
          variant="outline"
          className={cn(
            "w-full justify-start text-left font-normal",
            !selected && "text-muted-foreground"
          )}
        >
          <CalendarIcon className="mr-2 h-4 w-4" />
          {formatSelectedDate()}
        </Button>
      </PopoverTrigger>
      <PopoverContent className="w-auto p-0" align="start">
        <Calendar
          mode="range"
          selected={selected}
          onSelect={handleSelect}
          initialFocus
        />
        {showClearButton && selected && (
          <div className="p-2 border-t">
            <Button
              variant="ghost"
              className="w-full"
              onClick={() => {
                onClear?.();
                setIsOpen(false);
              }}
            >
              Clear
            </Button>
          </div>
        )}
      </PopoverContent>
    </Popover>
  );
} 
--------------------------------------------------------------------------------
<File: frontend/src/components/wrappers/dialog.tsx>
import * as React from "react";
import {
  Dialog as ShadcnDialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
} from "@/components/ui/dialog";
import { cn } from "@/lib/utils";

export interface DialogProps {
  children: React.ReactNode;
  trigger?: React.ReactNode;
  title?: string;
  description?: string;
  footer?: React.ReactNode;
  className?: string;
  contentClassName?: string;
  open?: boolean;
  onOpenChange?: (open: boolean) => void;
}

export const Dialog = ({
  children,
  trigger,
  title,
  description,
  footer,
  className,
  contentClassName,
  open,
  onOpenChange,
}: DialogProps) => {
  return (
    <ShadcnDialog open={open} onOpenChange={onOpenChange}>
      {trigger && <DialogTrigger asChild>{trigger}</DialogTrigger>}
      <DialogContent
        className={cn(
          "duration-300 data-[state=open]:animate-in data-[state=closed]:animate-out",
          "data-[state=open]:fade-in-0 data-[state=closed]:fade-out-0",
          "data-[state=open]:zoom-in-95 data-[state=closed]:zoom-out-95",
          "data-[state=open]:slide-in-from-left-1/2 data-[state=closed]:slide-out-to-left-1/2",
          "data-[state=open]:slide-in-from-top-[48%] data-[state=closed]:slide-out-to-top-[48%]",
          contentClassName
        )}
      >
        {title && (
          <DialogHeader>
            <DialogTitle>{title}</DialogTitle>
            {description && (
              <DialogDescription>{description}</DialogDescription>
            )}
          </DialogHeader>
        )}
        {children}
        {footer && <DialogFooter>{footer}</DialogFooter>}
      </DialogContent>
    </ShadcnDialog>
  );
};

export {
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
  DialogTrigger,
}; 
--------------------------------------------------------------------------------
<File: frontend/src/components/wrappers/dropdown-menu.tsx>
import * as React from "react";
import {
  DropdownMenu as ShadcnDropdownMenu,
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
} from "@/components/ui/dropdown-menu";
import { cn } from "@/lib/utils";

export interface DropdownMenuItemType {
  label: string;
  onClick?: () => void;
  disabled?: boolean;
  className?: string;
}

export interface DropdownMenuProps {
  trigger: React.ReactNode;
  items: (DropdownMenuItemType | "separator")[];
  label?: string;
  className?: string;
  contentClassName?: string;
  itemClassName?: string;
  open?: boolean;
  onOpenChange?: (open: boolean) => void;
}

export const DropdownMenu = ({
  trigger,
  items,
  label,
  className,
  contentClassName,
  itemClassName,
  open,
  onOpenChange,
}: DropdownMenuProps) => {
  return (
    <ShadcnDropdownMenu open={open} onOpenChange={onOpenChange}>
      <DropdownMenuTrigger asChild className={className}>
        {trigger}
      </DropdownMenuTrigger>
      <DropdownMenuContent
        className={cn(
          "animate-in fade-in-0 zoom-in-95",
          "data-[side=bottom]:slide-in-from-top-2",
          "data-[side=top]:slide-in-from-bottom-2",
          "data-[side=left]:slide-in-from-right-2",
          "data-[side=right]:slide-in-from-left-2",
          contentClassName
        )}
      >
        {label && <DropdownMenuLabel>{label}</DropdownMenuLabel>}
        {items.map((item, index) => {
          if (item === "separator") {
            return <DropdownMenuSeparator key={index} />;
          }

          return (
            <DropdownMenuItem
              key={item.label}
              onClick={item.onClick}
              disabled={item.disabled}
              className={cn(
                "cursor-pointer transition-colors",
                item.className,
                itemClassName
              )}
            >
              {item.label}
            </DropdownMenuItem>
          );
        })}
      </DropdownMenuContent>
    </ShadcnDropdownMenu>
  );
};

export {
  DropdownMenuContent,
  DropdownMenuItem,
  DropdownMenuLabel,
  DropdownMenuSeparator,
  DropdownMenuTrigger,
}; 
--------------------------------------------------------------------------------
<File: frontend/src/components/wrappers/icons.tsx>
import {
  Home,
  Calendar,
  List,
  Settings,
  LogOut,
  Check,
  AlertCircle,
  Loader2,
  ChevronLeft,
  ChevronRight,
  Menu,
  X,
  LifeBuoy,
  type LucideIcon,
} from "lucide-react";

export const Icons = {
  home: Home,
  calendar: Calendar,
  list: List,
  settings: Settings,
  logOut: LogOut,
  check: Check,
  alertCircle: AlertCircle,
  spinner: Loader2,
  chevronLeft: ChevronLeft,
  chevronRight: ChevronRight,
  menu: Menu,
  x: X,
  lifeBuoy: LifeBuoy,
} as const; 
--------------------------------------------------------------------------------
<File: frontend/src/components/wrappers/input.tsx>
import * as React from "react";
import { Input as ShadcnInput } from "@/components/ui/input";
import { cn } from "@/lib/utils";

export interface InputProps
  extends React.InputHTMLAttributes<HTMLInputElement> {
  error?: boolean;
  helperText?: string;
}

export const Input = React.forwardRef<HTMLInputElement, InputProps>(
  ({ className, error, helperText, ...props }, ref) => {
    return (
      <div className="relative">
        <ShadcnInput
          className={cn(
            error && "border-red-500 focus-visible:ring-red-500",
            className
          )}
          ref={ref}
          {...props}
        />
        {helperText && (
          <p
            className={cn(
              "mt-1 text-sm",
              error ? "text-red-500" : "text-gray-500"
            )}
          >
            {helperText}
          </p>
        )}
      </div>
    );
  }
);

Input.displayName = "Input"; 
--------------------------------------------------------------------------------
<File: frontend/src/components/wrappers/select.tsx>
import * as React from "react";
import {
  Select as ShadcnSelect,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
  type SelectProps as ShadcnSelectProps,
} from "@/components/ui/select";
import { cn } from "@/lib/utils";

export interface SelectOption {
  value: string;
  label: string;
}

export interface SelectProps {
  options: SelectOption[];
  value?: string;
  onChange?: (value: string) => void;
  placeholder?: string;
  className?: string;
  error?: boolean;
  helperText?: string;
  disabled?: boolean;
}

export const Select = React.forwardRef<HTMLButtonElement, SelectProps>(
  ({
    options,
    value,
    onChange,
    placeholder = "Select an option",
    className,
    error,
    helperText,
    disabled,
    ...props
  }, ref) => {
    return (
      <div className="relative">
        <ShadcnSelect 
          defaultValue={value} 
          onValueChange={onChange} 
          disabled={disabled}
        >
          <SelectTrigger
            ref={ref}
            className={cn(
              error && "border-red-500 focus:ring-red-500",
              className
            )}
            {...props}
          >
            <SelectValue placeholder={placeholder} />
          </SelectTrigger>
          <SelectContent>
            {options.map((option) => (
              <SelectItem key={option.value} value={option.value}>
                {option.label}
              </SelectItem>
            ))}
          </SelectContent>
        </ShadcnSelect>
        {helperText && (
          <p
            className={cn(
              "mt-1 text-sm",
              error ? "text-red-500" : "text-gray-500"
            )}
          >
            {helperText}
          </p>
        )}
      </div>
    );
  }
);

Select.displayName = "Select"; 
--------------------------------------------------------------------------------
<File: frontend/src/components/wrappers/tabs.tsx>
import * as React from "react";
import {
  Tabs as ShadcnTabs,
  TabsContent,
  TabsList,
  TabsTrigger,
} from "@/components/ui/tabs";
import { cn } from "@/lib/utils";

export interface Tab {
  value: string;
  label: string;
  content: React.ReactNode;
  disabled?: boolean;
}

export interface TabsProps {
  tabs: Tab[];
  defaultValue?: string;
  value?: string;
  onValueChange?: (value: string) => void;
  className?: string;
  listClassName?: string;
  triggerClassName?: string;
  contentClassName?: string;
}

export const Tabs = ({
  tabs,
  defaultValue,
  value,
  onValueChange,
  className,
  listClassName,
  triggerClassName,
  contentClassName,
}: TabsProps) => {
  return (
    <ShadcnTabs
      defaultValue={defaultValue || tabs[0]?.value}
      value={value}
      onValueChange={onValueChange}
      className={cn("w-full", className)}
    >
      <TabsList className={cn("w-full justify-start", listClassName)}>
        {tabs.map((tab) => (
          <TabsTrigger
            key={tab.value}
            value={tab.value}
            disabled={tab.disabled}
            className={cn(
              "transition-all duration-200",
              "data-[state=active]:shadow-sm",
              triggerClassName
            )}
          >
            {tab.label}
          </TabsTrigger>
        ))}
      </TabsList>
      {tabs.map((tab) => (
        <TabsContent
          key={tab.value}
          value={tab.value}
          className={cn("mt-6", contentClassName)}
        >
          {tab.content}
        </TabsContent>
      ))}
    </ShadcnTabs>
  );
};

export { TabsContent, TabsList, TabsTrigger }; 
--------------------------------------------------------------------------------
<File: frontend/src/components/wrappers/toast.tsx>
import * as React from "react";
import {
  Toast as ShadcnToast,
  ToastProps as ShadcnToastProps,
  ToastProvider,
  ToastViewport,
} from "@/components/ui/toast";
import { useToast } from "@/components/ui/use-toast";
import { cn } from "@/lib/utils";

export const TOAST_DURATION = {
  SHORT: 3000,
  MEDIUM: 5000,
  LONG: 7000,
} as const;

export interface ToastProps extends Omit<ShadcnToastProps, "duration"> {
  duration?: keyof typeof TOAST_DURATION;
}

export const Toast = React.forwardRef<HTMLDivElement, ToastProps>(
  ({ className, duration = "MEDIUM", ...props }, ref) => {
    return (
      <ShadcnToast
        ref={ref}
        className={cn(
          "data-[state=open]:animate-in data-[state=closed]:animate-out",
          "data-[swipe=end]:animate-out data-[state=closed]:fade-out-80",
          "slide-in-from-right-full data-[state=closed]:slide-out-to-right-full",
          "data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)]",
          "transition-all duration-300 ease-in-out",
          className
        )}
        duration={TOAST_DURATION[duration]}
        {...props}
      />
    );
  }
);

Toast.displayName = "Toast";

export { ToastProvider, ToastViewport, useToast }; 
--------------------------------------------------------------------------------
<File: frontend/src/components/wrappers/toggle.tsx>
import * as React from "react";
import { Toggle as ShadcnToggle } from "@/components/ui/toggle";
import { cn } from "@/lib/utils";

export interface ToggleProps {
  pressed?: boolean;
  onPressedChange?: (pressed: boolean) => void;
  children?: React.ReactNode;
  className?: string;
  disabled?: boolean;
  variant?: "default" | "outline";
  size?: "default" | "sm" | "lg";
}

export const Toggle = React.forwardRef<HTMLButtonElement, ToggleProps>(
  ({
    pressed,
    onPressedChange,
    children,
    className,
    disabled,
    variant = "default",
    size = "default",
    ...props
  }, ref) => {
    return (
      <ShadcnToggle
        ref={ref}
        pressed={pressed}
        onPressedChange={onPressedChange}
        disabled={disabled}
        variant={variant}
        size={size}
        className={cn(
          "transition-all duration-200 ease-in-out",
          "data-[state=on]:bg-primary data-[state=on]:text-primary-foreground",
          "hover:bg-muted/80",
          disabled && "cursor-not-allowed opacity-50",
          className
        )}
        {...props}
      >
        {children}
      </ShadcnToggle>
    );
  }
);

Toggle.displayName = "Toggle"; 
--------------------------------------------------------------------------------
<File: frontend/src/hooks/use-toast.ts>
"use client"

// Inspired by react-hot-toast library
import * as React from "react"

import type {
  ToastActionElement,
  ToastProps,
} from "@/components/ui/toast"

const TOAST_LIMIT = 1
const TOAST_REMOVE_DELAY = 1000000

type ToasterToast = ToastProps & {
  id: string
  title?: React.ReactNode
  description?: React.ReactNode
  action?: ToastActionElement
}

const actionTypes = {
  ADD_TOAST: "ADD_TOAST",
  UPDATE_TOAST: "UPDATE_TOAST",
  DISMISS_TOAST: "DISMISS_TOAST",
  REMOVE_TOAST: "REMOVE_TOAST",
} as const

let count = 0

function genId() {
  count = (count + 1) % Number.MAX_SAFE_INTEGER
  return count.toString()
}

type ActionType = typeof actionTypes

type Action =
  | {
      type: ActionType["ADD_TOAST"]
      toast: ToasterToast
    }
  | {
      type: ActionType["UPDATE_TOAST"]
      toast: Partial<ToasterToast>
    }
  | {
      type: ActionType["DISMISS_TOAST"]
      toastId?: ToasterToast["id"]
    }
  | {
      type: ActionType["REMOVE_TOAST"]
      toastId?: ToasterToast["id"]
    }

interface State {
  toasts: ToasterToast[]
}

const toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()

const addToRemoveQueue = (toastId: string) => {
  if (toastTimeouts.has(toastId)) {
    return
  }

  const timeout = setTimeout(() => {
    toastTimeouts.delete(toastId)
    dispatch({
      type: "REMOVE_TOAST",
      toastId: toastId,
    })
  }, TOAST_REMOVE_DELAY)

  toastTimeouts.set(toastId, timeout)
}

export const reducer = (state: State, action: Action): State => {
  switch (action.type) {
    case "ADD_TOAST":
      return {
        ...state,
        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),
      }

    case "UPDATE_TOAST":
      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === action.toast.id ? { ...t, ...action.toast } : t
        ),
      }

    case "DISMISS_TOAST": {
      const { toastId } = action

      // ! Side effects ! - This could be extracted into a dismissToast() action,
      // but I'll keep it here for simplicity
      if (toastId) {
        addToRemoveQueue(toastId)
      } else {
        state.toasts.forEach((toast) => {
          addToRemoveQueue(toast.id)
        })
      }

      return {
        ...state,
        toasts: state.toasts.map((t) =>
          t.id === toastId || toastId === undefined
            ? {
                ...t,
                open: false,
              }
            : t
        ),
      }
    }
    case "REMOVE_TOAST":
      if (action.toastId === undefined) {
        return {
          ...state,
          toasts: [],
        }
      }
      return {
        ...state,
        toasts: state.toasts.filter((t) => t.id !== action.toastId),
      }
  }
}

const listeners: Array<(state: State) => void> = []

let memoryState: State = { toasts: [] }

function dispatch(action: Action) {
  memoryState = reducer(memoryState, action)
  listeners.forEach((listener) => {
    listener(memoryState)
  })
}

type Toast = Omit<ToasterToast, "id">

function toast({ ...props }: Toast) {
  const id = genId()

  const update = (props: ToasterToast) =>
    dispatch({
      type: "UPDATE_TOAST",
      toast: { ...props, id },
    })
  const dismiss = () => dispatch({ type: "DISMISS_TOAST", toastId: id })

  dispatch({
    type: "ADD_TOAST",
    toast: {
      ...props,
      id,
      open: true,
      onOpenChange: (open) => {
        if (!open) dismiss()
      },
    },
  })

  return {
    id: id,
    dismiss,
    update,
  }
}

function useToast() {
  const [state, setState] = React.useState<State>(memoryState)

  React.useEffect(() => {
    listeners.push(setState)
    return () => {
      const index = listeners.indexOf(setState)
      if (index > -1) {
        listeners.splice(index, 1)
      }
    }
  }, [state])

  return {
    ...state,
    toast,
    dismiss: (toastId?: string) => dispatch({ type: "DISMISS_TOAST", toastId }),
  }
}

export { useToast, toast }

--------------------------------------------------------------------------------
<File: frontend/src/hooks/useDebounce.ts>
import { useState, useEffect } from 'react';

export function useDebounce<T>(value: T, delay: number): T {
  const [debouncedValue, setDebouncedValue] = useState<T>(value);

  useEffect(() => {
    const handler = setTimeout(() => {
      setDebouncedValue(value);
    }, delay);

    return () => {
      clearTimeout(handler);
    };
  }, [value, delay]);

  return debouncedValue;
} 
--------------------------------------------------------------------------------
<File: frontend/src/hooks/useMediaQuery.ts>
import { useState, useEffect } from 'react';

export function useMediaQuery(query: string): boolean {
  const [matches, setMatches] = useState(false);

  useEffect(() => {
    const media = window.matchMedia(query);
    if (media.matches !== matches) {
      setMatches(media.matches);
    }
    const listener = () => setMatches(media.matches);
    media.addEventListener('change', listener);
    return () => media.removeEventListener('change', listener);
  }, [matches, query]);

  return matches;
} 
--------------------------------------------------------------------------------
<File: frontend/src/hooks/useSync.ts>
import { useEffect, useCallback } from 'react';
import { useAppDispatch, useAppSelector } from '@/store';
import { smartDebounceManager, ChangeType } from '@/utils/SmartDebounceManager';
import { fetchUserDataThunk } from '@/store/thunks/syncThunks';
import type { SyncChange } from '@/types/api';

export function useSync() {
  const dispatch = useAppDispatch();
  const syncStatus = useAppSelector(state => state.sync.status);
  const lastSynced = useAppSelector(state => state.sync.lastSynced);
  const pendingChanges = useAppSelector(state => state.sync.pendingChanges);

  // Initialize the SmartDebounceManager with dispatch
  useEffect(() => {
    smartDebounceManager.initialize(dispatch);
  }, [dispatch]);

  // Function to handle changes that need to be synced
  const handleChange = useCallback((
    type: SyncChange['type'],
    operation: SyncChange['operation'],
    data: any,
    changeType?: ChangeType,
    id?: string
  ) => {
    // Ensure id is provided for update and delete operations
    if ((operation === 'update' || operation === 'delete') && !id) {
      throw new Error(`ID is required for ${operation} operation`);
    }

    const change: SyncChange = {
      type,
      operation,
      ...(id && { id }), // Only include id if it's provided
      data,
      timestamp: new Date().toISOString(),
      ...(changeType && { changeType }), // Only include changeType if it's provided
    };

    smartDebounceManager.addChange(change);
  }, []);

  // Function to force sync all pending changes
  const syncAll = useCallback(async () => {
    await smartDebounceManager.syncAll();
  }, []);

  // Function to load initial data
  const loadInitialData = useCallback(async () => {
    await dispatch(fetchUserDataThunk());
  }, [dispatch]);

  // Function to clear all pending changes
  const clearChanges = useCallback(() => {
    smartDebounceManager.clear();
  }, []);

  return {
    syncStatus,
    lastSynced,
    pendingChanges,
    handleChange,
    syncAll,
    loadInitialData,
    clearChanges,
  };
}

// Example usage in a component:
/*
function TaskComponent({ task }) {
  const { handleChange } = useSync();

  const onTitleChange = (newTitle: string) => {
    handleChange(
      'task',
      'update',
      { ...task, title: newTitle },
      'text',
      task.id
    );
  };

  const onStatusChange = (newStatus: Status) => {
    handleChange(
      'task',
      'update',
      { 
        ...task, 
        status: newStatus,
        statusHistory: [
          ...task.statusHistory,
          {
            status: newStatus,
            changedAt: new Date().toISOString(),
          }
        ]
      },
      'status',
      task.id
    );
  };

  // ... rest of the component
}
*/ 
--------------------------------------------------------------------------------
<File: frontend/src/index.css>
:root {
  font-family: Inter, system-ui, Avenir, Helvetica, Arial, sans-serif;
  line-height: 1.5;
  font-weight: 400;

  color-scheme: light dark;
  color: rgba(255, 255, 255, 0.87);
  background-color: #242424;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}
a:hover {
  color: #535bf2;
}

body {
  margin: 0;
  display: flex;
  place-items: center;
  min-width: 320px;
  min-height: 100vh;
}

h1 {
  font-size: 3.2em;
  line-height: 1.1;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #1a1a1a;
  cursor: pointer;
  transition: border-color 0.25s;
}
button:hover {
  border-color: #646cff;
}
button:focus,
button:focus-visible {
  outline: 4px auto -webkit-focus-ring-color;
}

@media (prefers-color-scheme: light) {
  :root {
    color: #213547;
    background-color: #ffffff;
  }
  a:hover {
    color: #747bff;
  }
  button {
    background-color: #f9f9f9;
  }
}

--------------------------------------------------------------------------------
<File: frontend/src/lib/navigation.ts>
export const ROUTES = {
  HOME: "/",
  WEEKLY_PLAN: "/weekly-plan",
  MASTER_LIST: "/master-list",
  SETTINGS: "/settings",
} as const;

export type Route = typeof ROUTES[keyof typeof ROUTES];

export const NAV_ITEMS = [
  {
    label: "Home",
    path: ROUTES.HOME,
    icon: "home",
  },
  {
    label: "Weekly Plan",
    path: ROUTES.WEEKLY_PLAN,
    icon: "calendar",
  },
  {
    label: "Master List",
    path: ROUTES.MASTER_LIST,
    icon: "list",
  },
] as const; 
--------------------------------------------------------------------------------
<File: frontend/src/lib/utils.ts>
import { clsx, type ClassValue } from "clsx"
import { twMerge } from "tailwind-merge"

export function cn(...inputs: ClassValue[]) {
  return twMerge(clsx(inputs))
}

--------------------------------------------------------------------------------
<File: frontend/src/main.tsx>
import React from 'react'
import ReactDOM from 'react-dom/client'
import { Provider } from 'react-redux'
import { store } from '@/store'
import App from './App'
import '@/styles/globals.css'

// Set up theme based on user preference
//const isDarkMode = window.matchMedia("(prefers-color-scheme: dark)").matches;
const isDarkMode = false;
document.documentElement.classList.toggle("dark", isDarkMode);

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <Provider store={store}>
      <App />
    </Provider>
  </React.StrictMode>,
)

--------------------------------------------------------------------------------
<File: frontend/src/pages/MasterList.tsx>
import { FilterBar } from "@/components/master-list/FilterBar";
import { ItemTable } from "@/components/master-list/ItemTable";
import { AddTaskDialog } from "@/components/master-list/AddTaskDialog";
import { AddGoalDialog } from "@/components/master-list/AddGoalDialog";

export const MasterList = () => {
  return (
    <div className="container mx-auto max-w-[95%] space-y-4 py-4">
      <div className="flex items-center justify-between mb-4">
        <h1 className="text-2xl font-semibold tracking-tight">Master List</h1>
        <div className="flex gap-2">
          <AddTaskDialog />
          <AddGoalDialog />
        </div>
      </div>
      <FilterBar />
      <ItemTable />
    </div>
  );
};

export default MasterList; 
--------------------------------------------------------------------------------
<File: frontend/src/services/api.ts>
import { ApiResponse, UserData, SyncRequest, SyncResponseData } from '@/types/api';

const API_BASE_URL = '/api/v1';

// Helper function to handle API responses
async function handleResponse<T>(response: Response): Promise<ApiResponse<T>> {
  const data = await response.json();
  if (!response.ok) {
    throw data.error || new Error('An error occurred while fetching the data.');
  }
  return data;
}

// Helper function to get headers
function getHeaders(): HeadersInit {
  // TODO: Add actual auth token handling
  return {
    'Content-Type': 'application/json',
    'X-User-ID': 'test-user-id', // TODO: Replace with actual user ID from auth
  };
}

// API Functions
export async function fetchUserData(): Promise<ApiResponse<UserData>> {
  const response = await fetch(`${API_BASE_URL}/user-data`, {
    method: 'GET',
    headers: getHeaders(),
  });
  return handleResponse<UserData>(response);
}

export async function syncChanges(request: SyncRequest): Promise<ApiResponse<SyncResponseData>> {
  const response = await fetch(`${API_BASE_URL}/sync`, {
    method: 'POST',
    headers: getHeaders(),
    body: JSON.stringify(request),
  });
  return handleResponse<SyncResponseData>(response);
}

// Error retry configuration
export const RETRY_CONFIG = {
  maxRetries: 3,
  baseDelay: 1000, // 1 second
  maxDelay: 10000, // 10 seconds
} as const;

// Helper function for exponential backoff
export function getRetryDelay(attempt: number): number {
  const delay = Math.min(
    RETRY_CONFIG.maxDelay,
    RETRY_CONFIG.baseDelay * Math.pow(2, attempt)
  );
  // Add some randomness to prevent thundering herd
  return delay + (Math.random() * 1000);
} 
--------------------------------------------------------------------------------
<File: frontend/src/store/index.ts>
import { configureStore } from '@reduxjs/toolkit'
import { TypedUseSelectorHook, useDispatch, useSelector } from 'react-redux'
import tasksReducer from './slices/tasksSlice'
import goalsReducer from './slices/goalsSlice'
import categoriesReducer from './slices/categoriesSlice'
import dashboardReducer from './slices/dashboardSlice'
import syncReducer from './slices/syncSlice'
import masterListReducer from './slices/masterListSlice'

export const store = configureStore({
  reducer: {
    tasks: tasksReducer,
    goals: goalsReducer,
    categories: categoriesReducer,
    dashboard: dashboardReducer,
    sync: syncReducer,
    masterList: masterListReducer,
  },
})

// Infer the `RootState` and `AppDispatch` types from the store itself
export type RootState = ReturnType<typeof store.getState>
export type AppDispatch = typeof store.dispatch

// Use throughout your app instead of plain `useDispatch` and `useSelector`
export const useAppDispatch: () => AppDispatch = useDispatch
export const useAppSelector: TypedUseSelectorHook<RootState> = useSelector 
--------------------------------------------------------------------------------
<File: frontend/src/store/slices/categoriesSlice.ts>
import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { Category } from '@/types'

interface CategoriesState {
  items: Record<string, Category>;
  loading: boolean;
  error: string | null;
}

const initialState: CategoriesState = {
  items: {},
  loading: false,
  error: null,
}

export const categoriesSlice = createSlice({
  name: 'categories',
  initialState,
  reducers: {
    setCategories: (state, action: PayloadAction<Record<string, Category>>) => {
      state.items = action.payload
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload
    },
    setError: (state, action: PayloadAction<string | null>) => {
      state.error = action.payload
    },
  },
})

export const { setCategories, setLoading, setError } = categoriesSlice.actions
export default categoriesSlice.reducer 
--------------------------------------------------------------------------------
<File: frontend/src/store/slices/dashboardSlice.ts>
import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { DashboardWidget } from '@/types'

interface DashboardState {
  widgets: DashboardWidget[];
  loading: boolean;
  error: string | null;
}

const initialState: DashboardState = {
  widgets: [],
  loading: false,
  error: null,
}

export const dashboardSlice = createSlice({
  name: 'dashboard',
  initialState,
  reducers: {
    setWidgets: (state, action: PayloadAction<DashboardWidget[]>) => {
      state.widgets = action.payload
    },
    addWidget: (state, action: PayloadAction<DashboardWidget>) => {
      state.widgets.push(action.payload)
    },
    removeWidget: (state, action: PayloadAction<string>) => {
      state.widgets = state.widgets.filter(widget => widget.id !== action.payload)
    },
    updateWidget: (state, action: PayloadAction<DashboardWidget>) => {
      const index = state.widgets.findIndex(widget => widget.id === action.payload.id)
      if (index !== -1) {
        state.widgets[index] = action.payload
      }
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload
    },
    setError: (state, action: PayloadAction<string | null>) => {
      state.error = action.payload
    },
  },
})

export const { 
  setWidgets, 
  addWidget, 
  removeWidget, 
  updateWidget, 
  setLoading, 
  setError 
} = dashboardSlice.actions

export default dashboardSlice.reducer 
--------------------------------------------------------------------------------
<File: frontend/src/store/slices/goalsSlice.ts>
import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { Goal } from '@/types'

interface GoalsState {
  items: Record<string, Goal>;
  loading: boolean;
  error: string | null;
}

const initialState: GoalsState = {
  items: {},
  loading: false,
  error: null,
}

export const goalsSlice = createSlice({
  name: 'goals',
  initialState,
  reducers: {
    setGoals: (state, action: PayloadAction<Record<string, Goal>>) => {
      state.items = action.payload
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload
    },
    setError: (state, action: PayloadAction<string | null>) => {
      state.error = action.payload
    },
    updateGoal: (state, action: PayloadAction<{ id: string; changes: Partial<Goal> }>) => {
      const { id, changes } = action.payload;
      if (state.items[id]) {
        state.items[id] = { ...state.items[id], ...changes };
      }
    },
    deleteGoal: (state, action: PayloadAction<string>) => {
      const id = action.payload;
      delete state.items[id];
    },
    addGoal: (state, action: PayloadAction<Goal>) => {
      state.items[action.payload.id] = action.payload;
    },
  },
})

export const { setGoals, setLoading, setError, updateGoal, deleteGoal, addGoal } = goalsSlice.actions
export default goalsSlice.reducer 
--------------------------------------------------------------------------------
<File: frontend/src/store/slices/masterListSlice.ts>
import { createSlice, PayloadAction } from '@reduxjs/toolkit';
import { Status, UUID } from '../../types';
import { DateRange } from 'react-day-picker';

interface MasterListState {
  filters: {
    search: string;
    status: Status[];
    categories?: UUID[];
    priorityRange?: {
      min: number;
      max: number;
    };
    dateRange?: DateRange | undefined;
  };
  sort: {
    column: string;
    direction: 'asc' | 'desc';
  };
  view: {
    filterBarExpanded: boolean;
  };
}

const initialState: MasterListState = {
  filters: {
    search: '',
    status: [],
  },
  sort: {
    column: 'updatedAt',
    direction: 'desc',
  },
  view: {
    filterBarExpanded: false,
  },
};

export const masterListSlice = createSlice({
  name: 'masterList',
  initialState,
  reducers: {
    setSearch: (state, action: PayloadAction<string>) => {
      state.filters.search = action.payload;
    },
    toggleStatus: (state, action: PayloadAction<Status>) => {
      const index = state.filters.status.indexOf(action.payload);
      if (index === -1) {
        state.filters.status.push(action.payload);
      } else {
        state.filters.status.splice(index, 1);
      }
    },
    setCategories: (state, action: PayloadAction<UUID[]>) => {
      state.filters.categories = action.payload;
    },
    setPriorityRange: (state, action: PayloadAction<{ min: number; max: number }>) => {
      state.filters.priorityRange = action.payload;
    },
    setDateRange: (state, action: PayloadAction<DateRange | undefined>) => {
      state.filters.dateRange = action.payload;
    },
    setSort: (state, action: PayloadAction<{ column: string; direction: 'asc' | 'desc' }>) => {
      state.sort = action.payload;
    },
    toggleFilterBar: (state) => {
      state.view.filterBarExpanded = !state.view.filterBarExpanded;
    },
    resetFilters: (state) => {
      state.filters = initialState.filters;
    },
  },
});

export const {
  setSearch,
  toggleStatus,
  setCategories,
  setPriorityRange,
  setDateRange,
  setSort,
  toggleFilterBar,
  resetFilters,
} = masterListSlice.actions;

export default masterListSlice.reducer; 
--------------------------------------------------------------------------------
<File: frontend/src/store/slices/syncSlice.ts>
import { createSlice, PayloadAction } from '@reduxjs/toolkit'

type SyncStatus = 'idle' | 'syncing' | 'error'

interface SyncState {
  status: SyncStatus;
  lastSynced: string | null;
  pendingChanges: number;
  error: string | null;
}

const initialState: SyncState = {
  status: 'idle',
  lastSynced: null,
  pendingChanges: 0,
  error: null,
}

export const syncSlice = createSlice({
  name: 'sync',
  initialState,
  reducers: {
    setStatus: (state, action: PayloadAction<SyncStatus>) => {
      state.status = action.payload;
      // Clear error when status changes to anything but error
      if (action.payload !== 'error') {
        state.error = null;
      }
    },
    setError: (state, action: PayloadAction<string>) => {
      state.status = 'error';
      state.error = action.payload;
    },
    setLastSynced: (state, action: PayloadAction<string>) => {
      // Only update lastSynced if we're not in an error state
      if (state.status !== 'error') {
        state.lastSynced = action.payload;
      }
    },
    incrementPendingChanges: (state) => {
      state.pendingChanges += 1;
    },
    decrementPendingChanges: (state) => {
      state.pendingChanges = Math.max(0, state.pendingChanges - 1);
    },
    resetPendingChanges: (state) => {
      state.pendingChanges = 0;
    },
  },
})

export const { 
  setStatus, 
  setError,
  setLastSynced, 
  incrementPendingChanges, 
  decrementPendingChanges,
  resetPendingChanges,
} = syncSlice.actions

export default syncSlice.reducer 
--------------------------------------------------------------------------------
<File: frontend/src/store/slices/tasksSlice.ts>
import { createSlice, PayloadAction } from '@reduxjs/toolkit'
import { Task } from '@/types'

interface TasksState {
  items: Record<string, Task>;
  loading: boolean;
  error: string | null;
}

const initialState: TasksState = {
  items: {},
  loading: false,
  error: null,
}

export const tasksSlice = createSlice({
  name: 'tasks',
  initialState,
  reducers: {
    setTasks: (state, action: PayloadAction<Record<string, Task>>) => {
      console.log('Setting tasks in Redux:', action.payload);
      state.items = action.payload;
      console.log('New tasks state:', state.items);
    },
    setLoading: (state, action: PayloadAction<boolean>) => {
      state.loading = action.payload
    },
    setError: (state, action: PayloadAction<string | null>) => {
      state.error = action.payload
    },
    updateTask: (state, action: PayloadAction<{ id: string; changes: Partial<Task> }>) => {
      const { id, changes } = action.payload;
      console.log('Updating task in Redux:', { id, changes });
      console.log('Current state for this task:', state.items[id]);
      
      if (state.items[id]) {
        state.items[id] = { ...state.items[id], ...changes };
        console.log('New state for this task:', state.items[id]);
      } else {
        console.log('Task not found in Redux state:', id);
      }
    },
    deleteTask: (state, action: PayloadAction<string>) => {
      const id = action.payload;
      delete state.items[id];
    },
    addTask: (state, action: PayloadAction<Task>) => {
      state.items[action.payload.id] = action.payload;
    },
  },
})

export const { setTasks, setLoading, setError, updateTask, deleteTask, addTask } = tasksSlice.actions
export default tasksSlice.reducer 
--------------------------------------------------------------------------------
<File: frontend/src/store/thunks/syncThunks.ts>
import { createAsyncThunk } from '@reduxjs/toolkit';
import { fetchUserData, syncChanges, getRetryDelay, RETRY_CONFIG } from '@/services/api';
import { setTasks } from '../slices/tasksSlice';
import { setGoals } from '../slices/goalsSlice';
import { setCategories } from '../slices/categoriesSlice';
import { setWidgets } from '../slices/dashboardSlice';
import { setStatus, setLastSynced, resetPendingChanges, setError } from '../slices/syncSlice';
import type { RootState } from '../index';
import type { SyncChange } from '@/types/api';
import type { Task } from '@/types';

// Fetch all user data
export const fetchUserDataThunk = createAsyncThunk(
  'sync/fetchUserData',
  async (_, { dispatch, rejectWithValue }) => {
    try {
      dispatch(setStatus('syncing'));
      const response = await fetchUserData();
      
      if (!response.success || !response.data) {
        throw new Error('Failed to fetch user data: Invalid response');
      }

      console.log('Received tasks from API:', response.data.tasks);
      
      // Normalize task IDs by removing hyphens
      const normalizedTasks = Object.entries(response.data.tasks).reduce((acc, [id, task]) => {
        const normalizedId = id.replace(/-/g, '');
        acc[normalizedId] = task;
        return acc;
      }, {} as Record<string, Task>);

      console.log('Normalized tasks for Redux:', normalizedTasks);

      // Update all slices with the fetched data
      dispatch(setTasks(normalizedTasks));
      dispatch(setGoals(response.data.goals));
      dispatch(setCategories(response.data.categories));
      if (response.data.dashboard) {
        dispatch(setWidgets(response.data.dashboard.widgets));
      }
      dispatch(setLastSynced(response.data.lastSyncedAt));
      dispatch(setStatus('idle'));
      return response.data;
    } catch (error) {
      dispatch(setStatus('error'));
      // Don't update lastSynced on error
      return rejectWithValue(error);
    }
  }
);

// Sync changes with retry logic
export const syncChangesThunk = createAsyncThunk(
  'sync/syncChanges',
  async (changes: SyncChange[], { dispatch, getState, rejectWithValue }) => {
    const state = getState() as RootState;
    let attempt = 0;
    
    while (attempt < RETRY_CONFIG.maxRetries) {
      try {
        dispatch(setStatus('syncing'));
        
        const response = await syncChanges({
          changes,
          clientLastSync: state.sync.lastSynced || new Date().toISOString(),
        });
        
        if (!response.success || !response.data) {
          throw new Error('Sync failed: Invalid response');
        }

        // Process any server changes
        if (response.data.serverChanges?.length) {
          for (const change of response.data.serverChanges) {
            switch (change.type) {
              case 'task':
                if (change.operation === 'delete') {
                  // Handle delete
                } else if (change.data) {
                  dispatch(setTasks({ [change.data.id]: change.data }));
                }
                break;
              case 'goal':
                if (change.operation === 'delete') {
                  // Handle delete
                } else if (change.data) {
                  dispatch(setGoals({ [change.data.id]: change.data }));
                }
                break;
              case 'category':
                if (change.operation === 'delete') {
                  // Handle delete
                } else if (change.data) {
                  dispatch(setCategories({ [change.data.id]: change.data }));
                }
                break;
              case 'dashboard':
                if (change.operation === 'delete') {
                  // Handle delete
                } else if (change.data) {
                  dispatch(setWidgets(change.data.widgets));
                }
                break;
            }
          }
        }
        
        // Only update lastSynced and reset status if we successfully processed everything
        dispatch(setLastSynced(response.data.syncedAt));
        dispatch(resetPendingChanges());
        dispatch(setStatus('idle'));
        return response.data;
      } catch (error) {
        attempt++;
        
        // On final retry, set error status and reject
        if (attempt === RETRY_CONFIG.maxRetries) {
          const errorMessage = error instanceof Error ? error.message : 'Unknown sync error';
          dispatch(setError(errorMessage));
          return rejectWithValue(error);
        }
        
        // Wait before retrying
        await new Promise(resolve => setTimeout(resolve, getRetryDelay(attempt)));
      }
    }
  }
); 
--------------------------------------------------------------------------------
<File: frontend/src/styles/globals.css>
@tailwind base;
@tailwind components;
@tailwind utilities;

@layer base {
  :root {
    --background: 0 0% 100%;
    --foreground: 224 71.4% 4.1%;
    --card: 0 0% 100%;
    --card-foreground: 224 71.4% 4.1%;
    --popover: 0 0% 100%;
    --popover-foreground: 224 71.4% 4.1%;
    --primary: 220.9 39.3% 11%;
    --primary-foreground: 210 20% 98%;
    --secondary: 220 14.3% 95.9%;
    --secondary-foreground: 220.9 39.3% 11%;
    --muted: 220 14.3% 95.9%;
    --muted-foreground: 220 8.9% 46.1%;
    --accent: 220 14.3% 95.9%;
    --accent-foreground: 220.9 39.3% 11%;
    --destructive: 0 84.2% 60.2%;
    --destructive-foreground: 210 20% 98%;
    --border: 220 13% 91%;
    --input: 220 13% 91%;
    --ring: 224 71.4% 4.1%;
    --chart-1: 12 76% 61%;
    --chart-2: 173 58% 39%;
    --chart-3: 197 37% 24%;
    --chart-4: 43 74% 66%;
    --chart-5: 27 87% 67%;
    --radius: 0.5rem;
    
    /* Button colors */
    --button: 220 17% 27%;
    --button-hover: 220 13% 35%;
    --button-text: 0 0% 100%;
    --button-secondary: 220 13% 91%;
    --button-secondary-hover: 220 13% 84%;
    --button-secondary-text: 220 17% 27%;
  }

  .dark {
    --background: 224 71.4% 4.1%;
    --foreground: 210 20% 98%;
    --card: 224 71.4% 4.1%;
    --card-foreground: 210 20% 98%;
    --popover: 224 71.4% 4.1%;
    --popover-foreground: 210 20% 98%;
    --primary: 210 20% 98%;
    --primary-foreground: 220.9 39.3% 11%;
    --secondary: 215 27.9% 16.9%;
    --secondary-foreground: 210 20% 98%;
    --muted: 215 27.9% 16.9%;
    --muted-foreground: 217.9 10.6% 64.9%;
    --accent: 215 27.9% 16.9%;
    --accent-foreground: 210 20% 98%;
    --destructive: 0 62.8% 30.6%;
    --destructive-foreground: 210 20% 98%;
    --border: 215 27.9% 16.9%;
    --input: 215 27.9% 16.9%;
    --ring: 216 12.2% 83.9%;
    --chart-1: 220 70% 50%;
    --chart-2: 160 60% 45%;
    --chart-3: 30 80% 55%;
    --chart-4: 280 65% 60%;
    --chart-5: 340 75% 55%;

    /* Button colors - dark mode */
    --button: 220 17% 90%;
    --button-hover: 220 13% 80%;
    --button-text: 220 17% 27%;
    --button-secondary: 215 27.9% 16.9%;
    --button-secondary-hover: 215 27.9% 25%;
    --button-secondary-text: 210 20% 98%;
  }

  body {
    @apply bg-background text-foreground;
    font-feature-settings: "rlig" 1, "calt" 1;
  }

  h1, h2, h3, h4, h5, h6 {
    @apply font-heading font-semibold;
  }

  h1 { @apply text-3xl md:text-4xl; }
  h2 { @apply text-2xl md:text-3xl; }
  h3 { @apply text-xl md:text-2xl; }
  h4 { @apply text-lg md:text-xl; }
}

@layer components {
  .btn {
    @apply inline-flex items-center justify-center rounded-md text-sm font-medium transition-colors 
    focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-brandPrimary 
    disabled:opacity-50 disabled:pointer-events-none;
  }

  .btn-primary {
    @apply bg-brandPrimary text-white hover:bg-brandPrimary/90;
  }

  .btn-secondary {
    @apply bg-brandSecondary text-white hover:bg-brandSecondary/90;
  }

  .btn-outline {
    @apply border border-input hover:bg-accent hover:text-accent-foreground;
  }
}

@layer base {
  * {
    @apply border-border;
  }
  body {
    @apply bg-background text-foreground;
  }
} 
--------------------------------------------------------------------------------
<File: frontend/src/types/api.ts>
import { Task, Goal, Category, Dashboard } from './index';

// API Response Types
export interface ApiError {
  code: string;
  message: string;
  details?: any;
}

export interface ApiMetadata {
  timestamp: string;
  requestId: string;
  pagination?: {
    total: number;
    page: number;
    pageSize: number;
    hasMore: boolean;
  };
}

export interface ApiResponse<T> {
  success: boolean;
  data?: T;
  error?: ApiError;
  metadata?: ApiMetadata;
}

// API Request Types
export interface SyncChange {
  type: 'task' | 'goal' | 'category' | 'dashboard';
  operation: 'create' | 'update' | 'delete';
  id?: string;
  data?: any;
  timestamp: string;
  changeType?: 'text' | 'status' | 'priority' | 'drag';
}

export interface SyncRequest {
  changes: SyncChange[];
  clientLastSync: string;
}

// API Response Data Types
export interface UserData {
  tasks: Record<string, Task>;
  goals: Record<string, Goal>;
  categories: Record<string, Category>;
  dashboard: Dashboard | null;
  lastSyncedAt: string;
}

export interface SyncResponseData {
  serverChanges?: SyncChange[];
  syncedAt: string;
}

// API Error Codes
export const API_ERROR_CODES = {
  INVALID_REQUEST: 'INVALID_REQUEST',
  UNAUTHORIZED: 'UNAUTHORIZED',
  FORBIDDEN: 'FORBIDDEN',
  NOT_FOUND: 'NOT_FOUND',
  CONFLICT: 'CONFLICT',
  VALIDATION_ERROR: 'VALIDATION_ERROR',
  RATE_LIMITED: 'RATE_LIMITED',
  INTERNAL_ERROR: 'INTERNAL_ERROR',
  SERVICE_UNAVAILABLE: 'SERVICE_UNAVAILABLE',
} as const;

export type ApiErrorCode = typeof API_ERROR_CODES[keyof typeof API_ERROR_CODES]; 
--------------------------------------------------------------------------------
<File: frontend/src/types/index.ts>
// Common Types
export type UUID = string;
export type ISODateString = string;

export type Status = 'notStarted' | 'workingOnIt' | 'complete';
export type RecurrenceFrequency = 'daily' | 'weekly' | 'monthly' | 'yearly';
export type TimeRange = 'day' | 'week' | 'month';
export type WidgetType = 'todaysTasks' | 'progress' | 'upcomingTasks';

// Time Tracking
export interface TimeTracking {
  estimatedMinutes?: number;
  actualMinutes?: number;
}

// Status History
export interface StatusHistoryEntry {
  status: Status;
  changedAt: ISODateString;
  notes?: string;
}

// Completion Entry
export interface CompletionEntry {
  completedAt: ISODateString;
  completedBy: UUID;
  nextDueDate?: ISODateString;
  completionNotes?: string;
}

// Recurrence Rule
export interface RecurrenceRule {
  frequency: RecurrenceFrequency;
  interval: number;
  endDate?: ISODateString;
  maxOccurrences?: number;
  daysOfWeek?: number[];  // 0-6 for weekly
  dayOfMonth?: number;    // 1-31 for monthly
  months?: number[];      // 1-12 for yearly
  weekOfMonth?: number;   // -1 to 5 (-1 for last)
}

// Task Interface
export interface Task {
  id: UUID;
  userId: UUID;
  type: 'task';
  title: string;
  status: Status;
  priority: number;
  dynamicPriority: number;
  effort?: number;
  notes?: string;
  dueDate?: ISODateString;
  scheduledDate?: ISODateString;
  createdAt: ISODateString;
  updatedAt: ISODateString;
  categoryId?: UUID;
  subcategoryId?: UUID;
  
  statusHistory: StatusHistoryEntry[];
  completionHistory: CompletionEntry[];
  timeTracking?: TimeTracking;
  
  recurrence?: {
    isRecurring: boolean;
    rule?: RecurrenceRule;
  };
  
  tags?: string[];
  
  dependencies?: {
    blockedBy?: UUID[];
    blocks?: UUID[];
  };
  
  relationships?: {
    goalIds?: UUID[];
  };
}

// Goal Interface
export interface Goal {
  id: UUID;
  userId: UUID;
  type: 'goal';
  title: string;
  status: Status;
  priority: number;
  dynamicPriority: number;
  effort?: number;
  notes?: string;
  categoryId?: UUID;
  subcategoryId?: UUID;
  createdAt: ISODateString;
  updatedAt: ISODateString;
  
  measurement?: {
    targetValue?: number;
    currentValue?: number;
    measureUnit?: string;
  };
  
  timeline: {
    startDate?: ISODateString;
    targetDate: ISODateString;
  };
  
  relationships?: {
    parentGoalId?: UUID;
    childGoalIds?: UUID[];
    taskIds?: UUID[];
  };
  
  progressHistory: {
    date: ISODateString;
    value: number;
    notes?: string;
  }[];
}

// Category Interface
export interface Category {
  id: UUID;
  userId: UUID;
  name: string;
  color?: string;
  parentId?: UUID;
  
  organization: {
    icon?: string;
    displayOrder: number;
  };
  
  subcategories: {
    id: UUID;
    name: string;
    description?: string;
    color?: string;
    icon?: string;
    displayOrder: number;
  }[];
  
  description?: string;
  
  statistics?: {
    totalItems?: number;
    completedItems?: number;
    averageCompletionTime?: number;
  };
}

// Dashboard Widget Interface
export interface DashboardWidget {
  id: UUID;
  type: WidgetType;
  position: number;
  config: {
    title?: string;
    timeRange?: TimeRange;
  };
}

// Dashboard Interface
export interface Dashboard {
  id: UUID;
  userId: UUID;
  widgets: DashboardWidget[];
}

// Display Mappings
export const STATUS_DISPLAY = {
  notStarted: 'Not Started',
  workingOnIt: 'Working on It',
  complete: 'Complete'
} as const;

export const STATUS_COLORS = {
  notStarted: 'gray.500',
  workingOnIt: 'yellow.500',
  complete: 'green.500'
} as const;

export const PRIORITY_DISPLAY = {
  ranges: [
    { min: 80, label: 'Very High', color: 'red.500' },
    { min: 60, label: 'High', color: 'orange.500' },
    { min: 40, label: 'Medium', color: 'yellow.500' },
    { min: 20, label: 'Low', color: 'green.500' },
    { min: 0, label: 'Very Low', color: 'green.250' }
  ]
} as const;

export const EFFORT_DISPLAY = {
  1: 'Very Low',
  2: 'Low',
  3: 'Medium',
  4: 'High',
  5: 'Very High'
} as const;

export const TIME_RANGE_DISPLAY = {
  day: 'Daily',
  week: 'Weekly',
  month: 'Monthly'
} as const; 
--------------------------------------------------------------------------------
<File: frontend/src/utils/SmartDebounceManager.ts>
import { SyncChange } from '@/types/api';
import { AppDispatch } from '@/store';
import { syncChangesThunk } from '@/store/thunks/syncThunks';
import { incrementPendingChanges, decrementPendingChanges } from '@/store/slices/syncSlice';

// Debounce intervals for different change types (in milliseconds)
export const DEBOUNCE_INTERVALS = {
  text: 1000,      // Text changes (title, notes) - longer delay for typing
  status: 300,     // Status changes - quick feedback
  priority: 500,   // Priority changes - medium delay
  drag: 800,       // Drag operations - balance between responsiveness and performance
  default: 1000,   // Default delay for other operations
} as const;

// Only export the change types we want components to use
export type ChangeType = 'text' | 'status' | 'priority' | 'drag';

class SmartDebounceManager {
  private timers: Map<string, NodeJS.Timeout>;
  private changes: Map<string, SyncChange[]>;
  private dispatch: AppDispatch | null;

  constructor() {
    this.timers = new Map();
    this.changes = new Map();
    this.dispatch = null;
  }

  // Initialize with the Redux dispatch function
  initialize(dispatch: AppDispatch) {
    this.dispatch = dispatch;
  }

  // Get the debounce interval for a change type
  private getInterval(changeType?: ChangeType): number {
    return changeType ? DEBOUNCE_INTERVALS[changeType] : DEBOUNCE_INTERVALS.default;
  }

  // Generate a key for grouping related changes
  private getChangeKey(change: SyncChange): string {
    return `${change.type}-${change.changeType || 'default'}`;
  }

  // Add a change to be synced
  addChange(change: SyncChange) {
    if (!this.dispatch) {
      throw new Error('SmartDebounceManager not initialized with dispatch');
    }

    const key = this.getChangeKey(change);
    const interval = this.getInterval(change.changeType as ChangeType);

    // Add the change to our collection
    const existingChanges = this.changes.get(key) || [];
    this.changes.set(key, [...existingChanges, change]);

    // Increment pending changes counter
    this.dispatch(incrementPendingChanges());

    // Clear existing timer if any
    if (this.timers.has(key)) {
      clearTimeout(this.timers.get(key));
    }

    // Set new timer
    const timer = setTimeout(() => {
      this.syncChanges(key);
    }, interval);

    this.timers.set(key, timer);
  }

  // Sync changes for a specific key
  private async syncChanges(key: string) {
    if (!this.dispatch) {
      throw new Error('SmartDebounceManager not initialized with dispatch');
    }

    const changes = this.changes.get(key) || [];
    if (changes.length === 0) return;

    try {
      // Store changes locally but don't clear them yet
      const changesToSync = [...changes];

      // Dispatch the sync thunk
      const result = await this.dispatch(syncChangesThunk(changesToSync)).unwrap();

      // Only if sync was successful, clear the changes and decrement counter
      if (result) {
        this.changes.delete(key);
        this.timers.delete(key);
        changesToSync.forEach(() => {
          this.dispatch!(decrementPendingChanges());
        });
      }
    } catch (error) {
      console.error('Error syncing changes:', error);
      // On error, keep the changes in the queue for retry
      // The sync thunk will handle setting error status
    }
  }

  // Force sync all pending changes
  async syncAll() {
    if (!this.dispatch) {
      throw new Error('SmartDebounceManager not initialized with dispatch');
    }

    // Clear all timers
    for (const timer of this.timers.values()) {
      clearTimeout(timer);
    }
    this.timers.clear();

    // Collect all changes
    const allChanges: SyncChange[] = [];
    for (const changes of this.changes.values()) {
      allChanges.push(...changes);
    }

    if (allChanges.length > 0) {
      try {
        // Store changes but don't clear them yet
        const changesToSync = [...allChanges];
        
        // Attempt sync
        const result = await this.dispatch(syncChangesThunk(changesToSync)).unwrap();
        
        // Only if sync was successful, clear the changes and decrement counter
        if (result) {
          this.changes.clear();
          changesToSync.forEach(() => {
            this.dispatch!(decrementPendingChanges());
          });
        }
      } catch (error) {
        console.error('Error syncing all changes:', error);
        // On error, keep the changes in the queue for retry
      }
    }
  }

  // Clear all pending changes without syncing
  clear() {
    // Clear all timers
    for (const timer of this.timers.values()) {
      clearTimeout(timer);
    }
    this.timers.clear();
    this.changes.clear();
  }
}

// Export a singleton instance
export const smartDebounceManager = new SmartDebounceManager(); 
--------------------------------------------------------------------------------
<File: frontend/src/vite-env.d.ts>
/// <reference types="vite/client" />

--------------------------------------------------------------------------------
<File: frontend/tailwind.config.js>
/** @type {import('tailwindcss').Config} */
export default {
  content: [
    "./index.html",
    "./src/**/*.{js,ts,jsx,tsx}",
  ],
  darkMode: ['class', "class"],
  theme: {
  	extend: {
  		colors: {
  			brandPrimary: '#1D4ED8',
  			brandSecondary: '#9333EA',
  			brandAccent: '#F59E0B',
  			brandNeutral: {
  				DEFAULT: '#374151',
  				dark: '#9CA3AF'
  			},
  			status: {
  				notStarted: 'gray.500',
  				workingOnIt: 'yellow.500',
  				complete: 'green.500'
  			},
  			button: {
  				DEFAULT: 'hsl(var(--button))',
  				hover: 'hsl(var(--button-hover))',
  				text: 'hsl(var(--button-text))',
  				secondary: {
  					DEFAULT: 'hsl(var(--button-secondary))',
  					hover: 'hsl(var(--button-secondary-hover))',
  					text: 'hsl(var(--button-secondary-text))'
  				}
  			},
  			background: 'hsl(var(--background))',
  			foreground: 'hsl(var(--foreground))',
  			card: {
  				DEFAULT: 'hsl(var(--card))',
  				foreground: 'hsl(var(--card-foreground))'
  			},
  			popover: {
  				DEFAULT: 'hsl(var(--popover))',
  				foreground: 'hsl(var(--popover-foreground))'
  			},
  			primary: {
  				DEFAULT: 'hsl(var(--primary))',
  				foreground: 'hsl(var(--primary-foreground))'
  			},
  			secondary: {
  				DEFAULT: 'hsl(var(--secondary))',
  				foreground: 'hsl(var(--secondary-foreground))'
  			},
  			muted: {
  				DEFAULT: 'hsl(var(--muted))',
  				foreground: 'hsl(var(--muted-foreground))'
  			},
  			accent: {
  				DEFAULT: 'hsl(var(--accent))',
  				foreground: 'hsl(var(--accent-foreground))'
  			},
  			destructive: {
  				DEFAULT: 'hsl(var(--destructive))',
  				foreground: 'hsl(var(--destructive-foreground))'
  			},
  			border: 'hsl(var(--border))',
  			input: 'hsl(var(--input))',
  			ring: 'hsl(var(--ring))',
  			chart: {
  				'1': 'hsl(var(--chart-1))',
  				'2': 'hsl(var(--chart-2))',
  				'3': 'hsl(var(--chart-3))',
  				'4': 'hsl(var(--chart-4))',
  				'5': 'hsl(var(--chart-5))'
  			}
  		},
  		fontFamily: {
  			sans: [
  				'Inter',
  				'sans-serif'
  			],
  			heading: [
  				'Poppins',
  				'sans-serif'
  			]
  		},
  		animation: {
  			'status-check': 'status-check 0.3s ease-in-out'
  		},
  		keyframes: {
  			'status-check': {
  				'0%': {
  					transform: 'scale(0)'
  				},
  				'50%': {
  					transform: 'scale(1.2)'
  				},
  				'100%': {
  					transform: 'scale(1)'
  				}
  			}
  		},
  		borderRadius: {
  			lg: 'var(--radius)',
  			md: 'calc(var(--radius) - 2px)',
  			sm: 'calc(var(--radius) - 4px)'
  		}
  	}
  },
  plugins: [require("tailwindcss-animate")],
}


--------------------------------------------------------------------------------
<File: frontend/tsconfig.json>
{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Strict Type-Checking */
    "strict": true,
    "noImplicitAny": true,
    "strictNullChecks": true,
    "strictFunctionTypes": true,
    "strictBindCallApply": true,
    "strictPropertyInitialization": true,
    "noImplicitThis": true,
    "useUnknownInCatchVariables": true,
    "alwaysStrict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "exactOptionalPropertyTypes": true,
    "noImplicitReturns": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedIndexedAccess": true,
    "noImplicitOverride": true,
    "allowUnusedLabels": false,
    "allowUnreachableCode": false,

    /* Path Aliases */
    "baseUrl": ".",
    "paths": {
      "@/*": ["src/*"],
      "@components/*": ["src/components/*"],
      "@layouts/*": ["src/layouts/*"],
      "@pages/*": ["src/pages/*"],
      "@store/*": ["src/store/*"],
      "@utils/*": ["src/utils/*"],
      "@styles/*": ["src/styles/*"],
      "@types/*": ["src/types/*"]
    }
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}

--------------------------------------------------------------------------------
<File: frontend/tsconfig.node.json>
{
  "compilerOptions": {
    "composite": true,
    "incremental": true,
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2022",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "isolatedModules": true,
    "moduleDetection": "force",
    "emitDeclarationOnly": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["vite.config.ts"]
}

--------------------------------------------------------------------------------
<File: frontend/vite.config.ts>
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'
import path from 'path'

// https://vitejs.dev/config/
export default defineConfig({
  plugins: [react()],
  server: {
    proxy: {
      '/api/v1': {
        target: 'http://localhost:5000',
        changeOrigin: true,
      },
    },
  },
  resolve: {
    alias: {
      '@': path.resolve(__dirname, './src'),
      '@components': path.resolve(__dirname, './src/components'),
      '@layouts': path.resolve(__dirname, './src/layouts'),
      '@pages': path.resolve(__dirname, './src/pages'),
      '@store': path.resolve(__dirname, './src/store'),
      '@utils': path.resolve(__dirname, './src/utils'),
      '@styles': path.resolve(__dirname, './src/styles'),
      '@types': path.resolve(__dirname, './src/types'),
    },
  },
})

--------------------------------------------------------------------------------
<File: project_structure.md>
# Project Structure

This document outlines the organization of the codebase, grouping files by their primary functionality. Some files are listed in multiple categories if they have cross-cutting responsibilities.

---

## 1. Core Documents & Planning

- **README.md**  
  Contains an overview of the project, tech stack, and initial folder structure.

- **design_document.md**  
  Details architecture, data models, API endpoints, and UI design guidelines.

- **project_structure.md**  
  (This file) Provides a categorized overview of the codebase.

- **task_plan.md**  
  A step-by-step feature/implementation checklist.

- **widgets.md**  
  Specifications for dashboard widgets (e.g., Today’s Tasks, Progress).

---

## 2. Backend (Flask + CosmosDB)

- **backend/app.py**  
  Main Flask application with `/api/v1/user-data` and `/api/v1/sync` routes, global error handling, and rate limiting.

- **backend/cosmos_db.py**  
  `CosmosDBManager` class for CRUD operations against Cosmos DB.

- **backend/requirements.txt**  
  Lists Python dependencies (Flask, azure-cosmos, etc.).

---

## 3. Frontend Entrypoints & Configuration

- **frontend/index.html**  
  Root HTML for the React app.

- **frontend/package.json**  
  Lists JavaScript/TypeScript dependencies and scripts.

- **frontend/vite.config.ts**  
  Vite dev server settings, proxy config for backend, path aliases, etc.

- **frontend/tailwind.config.js**  
  Tailwind configuration (brand colors, utility classes).

- **frontend/postcss.config.js**  
  PostCSS + Autoprefixer setup for Tailwind.

- **frontend/src/main.tsx**  
  Main entry point that renders the React `<App />` and integrates Redux `<Provider>`.

---

## 4. Frontend State Management (Redux)

- **frontend/src/store/index.ts**  
  Initializes Redux store, combines root reducer, exports store types.

- **frontend/src/store/slices/tasksSlice.ts**  
  Manages `Task` data, supports add/update/delete operations.

- **frontend/src/store/slices/goalsSlice.ts**  
  Manages `Goal` data, supports add/update/delete operations.

- **frontend/src/store/slices/categoriesSlice.ts**  
  Manages `Category` data (name, color, etc.).

- **frontend/src/store/slices/dashboardSlice.ts**  
  Stores user’s Dashboard widgets, supports widget CRUD.

- **frontend/src/store/slices/syncSlice.ts**  
  Tracks overall sync status (`idle`, `syncing`, `error`), `lastSynced`, pending changes.

- **frontend/src/store/slices/masterListSlice.ts**  
  Maintains filters and sorting for the Master List (status, category, date range, etc.).

- **frontend/src/store/thunks/syncThunks.ts**  
  Async thunks for fetching user data (`fetchUserDataThunk`) and syncing changes (`syncChangesThunk`) with retry/backoff.

---

## 5. Debouncing & Syncing

- **frontend/src/hooks/useSync.ts**  
  Core hook that initializes `SmartDebounceManager`, handles load/sync actions, and tracks pending changes.

- **frontend/src/utils/SmartDebounceManager.ts**  
  Batches user edits (e.g., title changes, status toggles) and triggers `syncChangesThunk` after a delay.

- **frontend/src/hooks/useDebounce.ts**  
  Generic hook to debounce input values (primarily used for inline text editing).

- **frontend/src/store/thunks/syncThunks.ts**  
  (Referenced again here because it includes sync logic and retry/backoff.)

---

## 6. Frontend Pages & Page-Specific Components

### 6.1 Master List

- **frontend/src/pages/MasterList.tsx**  
  Top-level container for the Master List. Renders filter panel, item table, and “Add Task/Goal” buttons.

- **frontend/src/components/master-list/FilterBar.tsx**  
  Collapsible panel offering search, status/category/priority/date-range filters.

- **frontend/src/components/master-list/ItemTable.tsx**  
  Displays tasks/goals in a virtualized list. Columns for status, priority, dates, etc.

- **frontend/src/components/master-list/StatusCell.tsx**  
  Lets users toggle between `notStarted`, `workingOnIt`, and `complete`. Syncs changes via `useSync`.

- **frontend/src/components/master-list/InlineEdit.tsx**  
  Enables inline editing of text fields for tasks/goals with a debounce.

### 6.2 Weekly Plan (Placeholder)

- **frontend/src/App.tsx**  
  Routes to `<WeeklyPlan />` if implemented. Currently a placeholder.

### 6.3 Home / Dashboard (Placeholder)

- **frontend/src/App.tsx**  
  Renders `<Home />` at `/`.

---

## 7. Shared Layout & Navigation

- **frontend/src/components/layouts/layout.tsx**  
  Wraps main content with a top header (sync indicator, settings, logout) and sidebar navigation (collapsible on mobile).

- **frontend/src/components/layouts/app-layout.tsx**  
  Handles container widths (e.g., `max-w-lg` vs. `max-w-full`) and calls `loadInitialData` on mount.

---

## 8. UI Wrappers & Shared Components

These typically wrap Shadcn UI components or provide minor stylistic/business logic.  
Files like `button.tsx`, `select.tsx`, etc., implement consistent design tokens and minimal functionality.

- **frontend/src/components/wrappers/button.tsx**  
- **frontend/src/components/wrappers/dialog.tsx**  
- **frontend/src/components/wrappers/input.tsx**  
- **frontend/src/components/wrappers/select.tsx**  
- **frontend/src/components/wrappers/tabs.tsx**  
- **frontend/src/components/wrappers/toast.tsx**  
- **frontend/src/components/wrappers/toggle.tsx**  
- **frontend/src/components/wrappers/card.tsx**  
- **frontend/src/components/wrappers/container.tsx**  
- **frontend/src/components/wrappers/date-picker.tsx**  
- **frontend/src/components/wrappers/dropdown-menu.tsx**  
- **frontend/src/components/wrappers/icons.tsx**  

*(Also includes Shadcn-based components in `frontend/src/components/ui/`. These do not contain unique application logic, mainly styling and composition.)*

---

## 9. Miscellaneous Frontend Files

- **frontend/src/components/sync/SyncIndicator.tsx**  
  A small component that displays the global sync status (syncing, error, last synced time).

- **frontend/src/index.css**  
  A basic CSS file for global styles and resets.

- **frontend/src/styles/globals.css**  
  Tailwind’s base/component layers, plus color variables and brand theming.

- **frontend/src/lib/navigation.ts**  
  Defines app routes (`HOME`, `WEEKLY_PLAN`, etc.) and sidebar navigation items.

- **frontend/src/lib/utils.ts**  
  Utility function `cn()` for merging class names and other small helpers.

---

## 10. Types & Services

- **frontend/src/types/**  
  - **index.ts**: Shared TypeScript interfaces (Task, Goal, Category, etc.).  
  - **api.ts**: Defines API request/response interfaces, error codes, etc.

- **frontend/src/services/api.ts**  
  Low-level fetch helpers for `/api/v1/user-data` and `/api/v1/sync` calls, plus retry config.


--------------------------------------------------------------------------------
<File: README.md>
# life_manager

This is a personal project to help me manage my life. The main goal is to help me manage my tasks and goals and stay organized and productive. The main page will be blank for now. There will be a sidebar to navigate to the different pages.

The task page will be the second page. It will have a main grid area for tasks. There will be two types of tasks: 

- Recurring tasks: These are tasks that happen on a regular basis. For example, clean shower, etc. 
- One-time tasks: These are tasks that happen once and are not repeated. For example, sell my bike. 

We should have a data model in cosmos DB. When we mark a recurring task completed, it should be marked as completed for the current date and then it should show back up once the elapsed time since last completion is greater than the frequency of the task. 


.
├── backend
│   ├── app.py
│   ├── cosmos_db.py
│   └── requirements.txt
└── frontend
    ├── .gitignore
    ├── components.json
    ├── eslint.config.mjs
    ├── next.config.ts
    ├── package-lock.json
    ├── package.json
    ├── postcss.config.mjs
    ├── public
    │   ├── branding
    │   │   ├── next.svg
    │   │   └── vercel.svg
    │   ├── icons
    │   │   ├── favicon.ico
    │   │   └── site.webmanifest
    │   └── images
    │       ├── file.svg
    │       ├── globe.svg
    │       └── window.svg
    ├── src
    │   ├── app
    │   │   ├── globals.css
    │   │   ├── home
    │   │   │   └── page.tsx
    │   │   ├── layout.tsx
    │   │   ├── master-list
    │   │   │   └── page.tsx
    │   │   ├── page.tsx
    │   │   ├── sidebar
    │   │   │   └── sidebar.tsx
    │   │   └── weekly-plan
    │   │       └── page.tsx
    │   └── components
    │       ├── items
    │       │   ├── add-item-dialog.tsx
    │       │   └── item-filters.tsx
    │       └── ui
    │           ├── badge.tsx
    │           ├── button.tsx
    │           ├── card.tsx
    │           ├── checkbox.tsx
    │           ├── dialog.tsx
    │           ├── input.tsx
    │           ├── label.tsx
    │           ├── select.tsx
    │           └── switch.tsx
    ├── tailwind.config.ts
    └── tsconfig.json


## Tech Stack

### Backend

- Python
- Flask

### Frontend

- React
- NextJS
- TailwindCSS Styling
- Shadcn Components
- Lucide Icons

### Database

- CosmosDB

--------------------------------------------------------------------------------
<File: task_plan.md>


1. Implement the Backend Fundamentals (Flask + CosmosDB)
   - [x] Read `backend/cosmos_db.py` to understand the `CosmosDBManager` class and its usage.
   - [x] Review the "Backend Data Models (CosmosDB)" section of the design document.
   - [x] Create `backend/app.py` with a basic Flask app setup.
   - [x] Implement a utility function in `backend/utils.py` for converting between `snake_case` and `camelCase`.
   - [x] Ensure the Flask app can load environment variables for Cosmos DB configuration.

2. Set Up Core API Endpoints
   - [x] Implement `GET /api/v1/user-data`
     - [x] Fetch all data (tasks, goals, categories, dashboard) for a given user from Cosmos DB.
     - [x] Transform the data from `snake_case` to `camelCase` using the utility function.
     - [x] Return the data in the `ApiResponse<T>` format as described in the design document.
   - [x] Implement `POST /api/v1/sync`
     - [x] Receive batched changes (create, update, delete) from the frontend.
     - [x] Transform the data from `camelCase` to `snake_case` before interacting with Cosmos DB.
     - [x] Implement logic to handle concurrency or merges if needed.
     - [x] Return any `serverChanges` if the backend has more recent data.
     - [x] Include the `syncedAt` timestamp in the response.
   - [x] Implement Error Handling & Response Consistency
     - [x] Ensure standard HTTP error codes (400, 401, 403, etc.) are used.
     - [x] Ensure all responses use the `ApiResponse` format.
     - [x] Implement a global error handler in Flask to wrap errors in the consistent JSON structure.
   - [x] Implement Rate Limiting
     - [x] Configure rate limiting (e.g., Flask-Limiter) for the `/api/v1/user-data` and `/api/v1/sync` endpoints as described in the design document.
     - [x] Return the appropriate `X-RateLimit-*` headers and error response when the limit is exceeded.

3. Initialize the Frontend (React, Vite, TypeScript, Tailwind, Shadcn UI)
   - [x] Project Scaffolding
     - [x] Generate a Vite project with TypeScript template using `--template react-ts`
     - [x] Configure `tsconfig.json` for strict mode and path aliases
     - [x] Set up TypeScript strict mode and configure interface usage guidelines
     - [x] Configure and document type utility patterns for component props
     - [x] Integrate TailwindCSS
   - [x] Base UI Setup
     - [x] Initialize Shadcn/UI
     - [x] Install essential Shadcn components
     - [x] Create Component Wrappers
       - [x] Interactive Elements
         - [x] Button wrapper with brand variants
         - [x] Input wrapper with consistent styling
         - [x] Select wrapper with custom theming
         - [x] Toggle wrapper with animation constants
       - [x] Feedback Components
         - [x] Toast wrapper with standard durations
         - [x] Dialog wrapper with transition timing
       - [x] Layout Components
         - [x] Card wrapper with consistent padding/shadows
         - [x] Container wrapper with max-widths
       - [x] Navigation Components
         - [x] Tabs wrapper with brand styling
         - [x] DropdownMenu wrapper with animations
   - [x] Theme Configuration
     - [x] Set up `tailwind.config.js` with brand colors and typography
     - [x] Configure dark mode support
     - [x] Add global styles in `globals.css`
   - [x] Configure Redux Toolkit
     - [x] Set up your root reducer in `store.ts`
     - [x] Implement data normalization structure
     - [x] Set up selectors for computing derived data
     - [x] Add middleware for handling async actions and debounced sync logic
   - [x] Global Layout Setup
     - [x] Create base `<Layout>` component using our wrapped components
     - [x] Implement `<AppLayout>` with consistent container widths
     - [x] Set up responsive breakpoints alignment with design system
     - [x] Add navigation using wrapped components
     - [x] Test navigation between placeholder pages

4. Implement the Sync Flow (Frontend + Backend Integration)
   - [x] Redux Thunks or RTK Query
     - [x] Implement `fetchUserData` thunk for GET /api/v1/user-data
     - [x] Implement `syncChanges` thunk for POST /api/v1/sync
     - [x] Set up type validation for API responses against interfaces
     - [x] Implement version handling for interface changes
   - [x] Initial Load Flow
     - [] On app start, dispatch `fetchUserData()` to populate the store
     - [x] Show loading states appropriately
   - [x] Optimistic Updates & Debouncing
     - [x] Implement SmartDebounceManager
     - [x] Handle immediate Redux updates with queued syncs
     - [x] Track pendingChanges in the sync slice
     - [x] Implement status cycling animation for task/goal completion
     - [x] Configure debounce intervals per change type (text: 1000ms, status: 300ms, etc.)
   - [x] Error Handling
     - [x] Implement exponential backoff for retry attempts
     - [x] Add error state management in sync slice
   - [x] Sync Indicator
     - [x] Display sync status in Top Panel
     - [x] Show last synced time or error states

5. Build the Global UI Layout (Sidebar, Top Panel)
   - [x] Sidebar Implementation
     - [x] Create `<Sidebar>` with navigation links
     - [x] Implement collapse/expand logic
     - [x] Test responsiveness
   - [x] Top Panel (Header)
     - [x] Add logo/title, Sync Indicator, Settings, and Logout
     - [x] Hook up logout functionality
   - [x] Responsive Behavior & Styling
     - [x] Ensure mobile-friendly layout
     - [x] Apply consistent styling
     - [x] Implement consistent focus and hover states
     - [x] Set up animation timing constants

6. Implement the Home Page (Dashboard + Widgets)
   - [ ] Dashboard Slice
     - [ ] Set up dashboard slice in Redux
     - [ ] Implement widget CRUD actions
     - [ ] Implement widget position tracking and ordering
     - [ ] Set up widget-specific configuration persistence
   - [ ] Rendering Widgets
     - [ ] Create `<WidgetGrid>` and `<Widget>` components
     - [ ] Implement individual widget types
   - [ ] Add Widget Flow
     - [ ] Create widget selection modal
     - [ ] Handle widget creation and sync
   - [ ] Editing & Removing Widgets
     - [ ] Add widget configuration controls
     - [ ] Implement removal functionality

7. Implement the Weekly Plan Page
   - [ ] Page Layout
     - [ ] Create Unscheduled Tasks sidebar
     - [ ] Implement Weekly Calendar grid
     - [ ] Add week navigation
   - [ ] Drag-and-Drop Setup
     - [ ] Integrate drag-and-drop library
     - [ ] Set up drag sources and drop targets
   - [ ] State Management
     - [ ] Handle week selection state
     - [ ] Implement task filtering by date
   - [ ] Rescheduling & Sync
     - [ ] Update scheduledDate on drop
     - [ ] Sync changes to backend
   - [ ] Status Changes
     - [ ] Add inline status toggles
     - [ ] Handle immediate updates and syncs
   - [ ] Performance Optimization
     - [ ] Implement memoization for TaskCard components
     - [ ] Add virtualization for large task lists
   - [ ] Animation & Transitions
     - [ ] Add smooth transitions for week navigation
     - [ ] Implement drag preview and drop animations

8. Implement the Master List Page
   - [x] Filter Bar & Search
     - [x] Build filter panel with multiple criteria
     - [x] Implement search functionality
     - [x] Implement collapsible filter bar with animation
     - [x] Add priority range filter using PRIORITY_DISPLAY ranges
   - [x] Table/Grid Rendering
     - [x] Create unified task/goal list view
     - [x] Display relevant columns (status, title, priority, effort, category, due date, notes, created/updated)
     - [x] Implement virtualized rendering for performance
     - [x] Add status cycling with checkmark animation
   - [x] Inline Editing
     - [x] Enable direct field editing for title and notes
     - [x] Handle debounced syncs
   - [x] Sorting & Pagination
     - [x] Add sort functionality for all relevant columns
     - [x] Implement virtualization instead of pagination for better UX
   - [x] Delete / Archive
     - [x] Add item removal functionality
     - [x] Handle sync states
   - [x] Date Range Filtering
     - [x] Fix DatePicker component type issues
     - [x] Properly handle DateRange vs Date[] types
     - [x] Add proper null handling for date range clearing
   - [x] Filter Bar Expansion
     - [x] Add expand/collapse functionality
     - [x] Keep search always visible
     - [x] Add smooth animations for transitions
   - [x] Page Integration
     - [x] Create MasterList page component
     - [x] Add proper routing in App.tsx
     - [x] Ensure proper layout and spacing

9. Refine the Styling & Theming
   - [ ] Tailwind & Shadcn Pass
     - [ ] Ensure consistent styling
     - [ ] Implement dark mode if applicable
   - [ ] Focus & Hover States
     - [ ] Add appropriate interactive states
     - [ ] Verify accessibility
     - [ ] Implement consistent focus and hover states
   - [ ] Animations & Micro-interactions
     - [ ] Add subtle transitions
     - [ ] Maintain consistency
     - [ ] Set up animation timing constants

10. Testing, QA, and Performance Optimization
    - [ ] Unit Tests
      - [ ] Test Redux logic
      - [ ] Verify backend routes
      - [ ] Test status cycling and animations
    - [ ] Integration & E2E Testing
      - [ ] Test critical user flows
      - [ ] Verify drag-and-drop functionality
    - [ ] Performance Checks
      - [ ] Identify and fix bottlenecks
      - [ ] Optimize large lists if needed
      - [ ] Test virtualized lists
      - [ ] Test theme switching and responsive layouts
    - [ ] Accessibility Audits
      - [ ] Run accessibility checks
      - [ ] Fix any issues found

11. Deployment & Monitoring
    - [ ] Backend Deployment
      - [ ] Containerize Flask app
      - [ ] Configure production environment
    - [ ] Frontend Deployment
      - [ ] Deploy Vite application
      - [ ] Set up environment variables
    - [ ] Monitoring & Logging
      - [ ] Implement structured logging
      - [ ] Set up monitoring tools
      - [ ] Set up tracking for component render performance
      - [ ] Implement monitoring for sync operation latency
    - [ ] Error Tracking
      - [ ] Configure detailed error logging for sync failures
      - [ ] Set up monitoring for retry attempts and failure rates
    - [ ] CD/CI Pipeline
      - [ ] Automate deployment process
      - [ ] Create environment pipelines


--------------------------------------------------------------------------------
<File: widgets.md>
# Widget Specifications

## Widget Implementations

### Widget-Specific Configurations
```typescript
// Extends core WidgetConfig from Data Models
interface TodaysTasksWidgetConfig extends WidgetConfig {
    show_completed?: boolean;
    display_limit?: number;
}

interface ProgressWidgetConfig extends WidgetConfig {
    metric_type: 'tasks' | 'goals';
    time_range: TimeRange;
}

interface UpcomingTasksWidgetConfig extends WidgetConfig {
    time_frame: number;
    include_past_due?: boolean;
}
```

### Common Features
- Implements standard widget header
- Uses shared display mappings
- Follows sync strategy
- Uses common error handling

## Widget Types

### 1. Today's Tasks Widget

**Purpose**: Display tasks scheduled for the current day.

**Features**:
- Tasks list with status display mapping
- Priority indication using PRIORITY_DISPLAY mapping
- Empty state handling
- Task count with standardized formatting
- Expanded task details using common display patterns

**Data Requirements**:
- Tasks matching current date
- Associated category data
- Status history for sync

### 2. Progress Widget

**Purpose**: Show progress overview for selected time period.

**Features**:
- Uses standardized progress visualization
- Time range selection using TIME_RANGE_DISPLAY
- Metric display using common formatting
- Status indicators using STATUS_COLORS
- Historical data visualization

**Data Requirements**:
- Completion metrics
- Time-series data
- Associated status updates

### 3. Upcoming Tasks Widget

**Purpose**: Display approaching deadlines and scheduled tasks.

**Features**:
- Task list with due dates
- Uses established time grouping
- Status indication using STATUS_DISPLAY
- Priority display using shared mappings
- Category integration

**Data Requirements**:
- Future-dated tasks
- Priority and status data
- Category associations

## Data Integration

### Redux Integration
```typescript
// Follows established store structure
interface WidgetState {
    items: Record<UUID, WidgetData>;
    loading: boolean;
    error: string | null;
    sync_status: SyncStatus;
}

// Uses common selector patterns
const selectWidgetData = (state: RootState, widget_id: UUID) => 
    state.dashboard.widgets[widget_id];
```

### API Integration
```typescript
// Follows common response format
interface WidgetApiResponse<T> extends ApiResponse<T> {
    data?: T;
    error?: {
        code: string;
        message: string;
    };
}

// Implements rate limiting
const fetchWidgetData = async (widget_id: UUID): Promise<WidgetApiResponse> => {
    // Implementation following API guidelines
};
```



## Styling Guidelines

### Theme Integration
- Uses shared color mappings
- Consistent spacing patterns
- Standard typography scale
- Common component styling

## Future Considerations

### Planned Enhancements
- Additional widget types following established patterns
- Extended configuration using standard interfaces
- Custom widget framework maintaining consistency
- Export capabilities using common data formats
--------------------------------------------------------------------------------

<end codebase> 

